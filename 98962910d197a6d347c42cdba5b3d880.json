{"posts": [{"title": "Frigate + NVIDIA \u663e\u5361\u7b14\u8bb0\u672c\u7684\u90e8\u7f72", "date": "2025-06-28T12:11:00+08.00", "path": "/archives/frigate-on-linux-laptop-with-nvidia/", "text": "\u8f6f\u4ef6\u524d\u7f6e\nsudo pacman -Syu docker docker-compose nvidia-container-toolkit\nsudo systemctl enable --now docker\n# \u786e\u4fdd docker0 \u5df2\u7ecf\u88ab\u4ee3\u7406\u6216\u5df2\u8bbe\u7f6e\u597d\u8fde\u63a5\u4ee3\u7406\n\n\u786c\u4ef6\u8981\u6c42\n\u8be5\u65b9\u6848\u76f8\u6bd4\u4e8e\u4e4b\u524d\u7684\u4e10\u7248\u65b9\u6848\uff0c\u9700\u8981\u66f4\u65b0\u7684\u786c\u4ef6\u624d\u80fd\u89e3\u51b3\u79cd\u79cd\u517c\u5bb9\u6216\u6027\u80fd\u95ee\u9898\u3002\u7b14\u8005\u6d4b\u8bd5\u7684\u73af\u5883\uff1a-`\n                  .o+`\n                 `ooo/\n                `+oooo:\n               `+oooooo:                 poly@mokurin-arch \n               -+oooooo+:                ----------------- \n             `/:-:++oooo+:               OS: Arch Linux x86_64 \n            `/++++/+++++++:              Host: Dell G15 5520 \n           `/++++++++++++++:             Kernel: 6.15.2-arch1-1 \n          `/+++ooooooooooooo/`           Uptime: 22 hours, 2 mins \n         ./ooosssso++osssssso+`          Packages: 2766 (pacman), 8 (flatpak) \n        .oossssso-````/ossssss+`         Shell: zsh 5.9 \n       -osssssso.      :ssssssso.        Resolution: 1920x1080 \n      :osssssss/        osssso+++.       DE: Plasma 6.3.5 \n     /ossssssss/        +ssssooo/-       WM: kwin \n   `/ossssso+/:-        -:/+osssso+-     Theme: Materia [GTK2/3] \n  `+sso+:-`                 `.-/+oso:    Icons: breeze-dark [GTK2/3] \n `++:.                           `-/+/   Terminal: vscode \n .`                                 `/   CPU: 12th Gen Intel i7-12700H (20) @ 4.600GHz \n                                         GPU: Intel Alder Lake-P GT2 [Iris Xe Graphics] \n                                         GPU: NVIDIA GeForce RTX 3060 Mobile / Max-Q \n                                         Memory: -- MiB / 15669MiB\n\n\u4f7f\u7528\u7684\u6587\u4ef6\n\ninit.sh\n\nmkdir -p config storage\nmkdir -p config/model_cache/jinaai/jina-clip-v1\n# btrfs \u6539\u5584 sqlite \u7684\u6027\u80fd\nchattr -R +C config storage\ncp --reflink=auto config.yaml config/\ncp --reflink=auto yolo_nas_s.onnx config/\n\n# optional, useless semantic search\n# cp --reflink=auto *_fp16.onnx config/model_cache/jinaai/jina-clip-v1/\n\ndocker-compose up -d\n\n\nyolo_nas_s.onnx\n\n\u8be5\u6587\u4ef6\u7531\u4e8e\u7981\u6b62\u5206\u53d1\u8f6c\u6362\u6a21\u578b\uff0c\u5efa\u8bae\u4f7f\u7528 colab \u8fd0\u884c\u83b7\u53d6\u3002\ndocker-compose.yml\n\n\n-tensorrt \u53ea\u6709\u7528N\u5361\u52a0\u901f\u624d\u9700\u8981\uff0cAMD / Intel \u5361\u4e0d\u9700\u8981\u3002\nservices:\n  frigate:\n    container_name: frigate\n    restart: unless-stopped\n    stop_grace_period: 30s\n    image: ghcr.io/blakeblackshear/frigate:stable-tensorrt\n    volumes:\n      - ./config:/config\n      - ./storage:/media/frigate\n      - type: tmpfs # Optional: 1GB of memory, reduces SSD/SD Card wear\n        target: /tmp/cache\n        tmpfs:\n          size: 1000000000\n    cap_add:\n      - CAP_PERFMON\n    ports:\n      - &quot;8971:8971&quot;\n      - &quot;8554:8554&quot; # RTSP feeds\n    runtime: nvidia # migrate to CDI for newest nvidia driver\n    deploy:\n      resources:\n        reservations:\n          devices:\n            - driver: nvidia\n              device_ids: [&#39;0&#39;]\n              capabilities: [gpu, video]\n\n\nconfig.yaml\n\n\n\u6b64\u5904\u4ee5\u4e50\u6a59\u4e3a\u4f8b\u5b50\u3002\u5927\u591a\u6444\u50cf\u5934\u53ef\u4ee5\u5728 iSpy \u7684\u6587\u6863\u627e\u5230\u9700\u8981\u7684\u94fe\u63a5\u3002\u987a\u4fbf\u4e00\u63d0\uff0c\u4e50\u6a59\u6444\u50cf\u5934\u8981\u6c42 WIFI \u5bc6\u7801\u5fc5\u987b\u662f\u5b57\u6bcd\u52a0\u6570\u5b57\uff0c\u5426\u5219\u4e0d\u53ef\u80fd\u8fde\u63a5\u6210\u529f\u3002\nfrigate \u5728\u8fd9\u65b9\u9762\u7684\u6587\u6863\u51fa\u5947\u7684\u70c2\u3002\u4f60\u9700\u8981\u7efc\u5408\u7ffb\u9605 \u5b8c\u6574\u53c2\u8003\u914d\u7f6e \u548c\u5c0f\u8282\u751a\u81f3 issues \u3002version: 0.15-1\n# \u5173\u95ed mqtt \u6d88\u606f\u961f\u5217\nmqtt:\n  enabled: false\n# \u5173\u95ed TLS \u8fde\u63a5\uff08\u7aef\u53e3\u4e0d\u53d8\uff09\ntls:\n  enabled: false\n# \u5173\u95ed\u7f51\u9875\u9a8c\u8bc1\nauth:\n  # \u5982\u679c\u542f\u7528\uff0cadmin\u5bc6\u7801\u4f1a\u5728\u9996\u6b21\u542f\u52a8\u65f6\u8f93\u51fa\u5230\u65e5\u5fd7\u3002\n  # \u9519\u8fc7\u4e86\u6ca1\u5173\u7cfb\uff0c\u770b `docker-compose logs` \u8f93\u51fa\u3002\n  enabled: false \n\nffmpeg:\n  # \u5982\u679c\u9047\u5230 hardware capacity xxxx \u95ee\u9898\uff0c\n  # \u53ef\u4ee5\u901a\u8fc7\u5b98\u65b9\u5de5\u5177\u8bbe\u7f6e\u4f7f\u7528 H264 \u7f16\u7801\u4f20\u8f93\u3002\n  hwaccel_args: preset-nvidia\n  # IMOU \u7684\u6444\u50cf\u5934rtsp\u6d41\uff0cudp\u4f20\u8f93\u65f6\u5f88\u5bb9\u6613\u4e22\u5305\u3001\u91cd\u590d\u5305\u3001\u65ad\u6d41\u3002\n  input_args: -rtsp_transport tcp\n\n\n# \u4fdd\u7559\u5f55\u5236\u5386\u53f2\uff0c1\u5929\u7684\u5168\u90e8\u89c6\u9891\u548c30\u5929\u7684\u8b66\u544a/\u8bc6\u522b\u7247\u6bb5\u3002\nrecord:\n  enabled: true\n  retain:\n    days: 1\n    mode: all\n  alerts:\n    retain:\n      days: 30\n      mode: motion\n  detections:\n    retain:\n      days: 30\n      mode: motion\n\ncameras:\n  backyard:\n    enabled: true\n    ffmpeg:\n      inputs:\n        - path: \n            # \u6b64\u5904 PASSWORD \u548c\u4e50\u6a59 app \u4e2d\u8bbe\u7f6e\u7684\u4e00\u81f4\u3002\n            # CAMIP \u5373\u4e3a\u4f60\u7684\u6444\u50cf\u5934\u7ed1\u5b9a\u7684 ip \u5730\u5740\u3002\n            rtsp://admin:PASSWORD@CAMIP:554/cam/realmonitor?channel=1&amp;subtype=0\n          roles:\n            - detect\n    detect:\n      enabled: true\n    # \u4e0a\u4e0b\u5de6\u53f3\u3002\u8bf7\u52ff\u5c1d\u8bd5\u901a\u8fc7 onvif \u542f\u7528 autotracking \uff0c\u4e50\u6a59\u8fd9\u79cd\u60c5\u51b5\u4f1a\u6b7b\u673a\u3002\n    onvif:\n      host: CAMIP\n      port: 80\n      user: admin\n      password: PASSWORD\n\n\n    motion:\n      # mask\u6389\u4e50\u6a59\u7684\u65f6\u95f4\u6233\u533a\u57df\u3002\n      mask: 0.015,0.041,0.268,0.041,0.267,0.086,0.014,0.089\n      threshold: 40 # \u51cf\u5c11\u6811\u53f6\u6296\u52a8\u5bfc\u81f4\u7684\u4e0d\u5fc5\u8981 detect\u3002\n      contour_area: 10\n      improve_contrast: true\n\n# \u6ce8\u610f\uff1a\u90e8\u5206\u65e7\u7248\u663e\u5361\u53ef\u80fd\u4f1a\u9047\u5230 onnxruntime \u4e0d\u652f\u6301\u5bf9\u5e94 kernel \u7248\u672c\u7684\u95ee\u9898\n# \u5982\u679c\u6709 Intel CPU \u53ef\u4ee5\u8003\u8651 OpenVINO - CPU \u8fd0\u884c\u3002\ndetectors:\n  onnx:\n    type: onnx\n\n# \u6b64\u5904\u8bc6\u522b\u9ad8\u5bbd\u548c\u4e4b\u524d ipynb \u8fd0\u884c\u65f6\u8bbe\u7f6e\u4e00\u81f4\u3002\nmodel:\n  model_type: yolonas\n  width: 320 # &lt;--- should match whatever was set in notebook\n  height: 320 # &lt;--- should match whatever was set in notebook\n  input_pixel_format: bgr\n  input_tensor: nchw\n  path: /config/yolo_nas_s.onnx\n  labelmap_path: /labelmap/coco-80.txt\n\n\u5982\u4f55\u5f7b\u5e95\u5173\u95ed\u670d\u52a1\ndocker-compose down\n\n\u5982\u4f55\u901a\u8fc7\u547d\u4ee4\u884c\u91cd\u542f\u670d\u52a1 (\u4e0d\u63a8\u8350)\ndocker-compose stop\nsleep 2\ndocker-compose start\n\n", "categories": [{"name": "RTMP", "slug": "RTMP", "permalink": "/category/RTMP/"}], "tags": [{"name": "RTSP", "slug": "RTSP", "permalink": "/tag/RTSP/"}, {"name": "RTMP", "slug": "RTMP", "permalink": "/tag/RTMP/"}, {"name": "webcam", "slug": "webcam", "permalink": "/tag/webcam/"}, {"name": "frigate", "slug": "frigate", "permalink": "/tag/frigate/"}]}, {"title": "HN8145XR\u5149\u732b-\u6cb3\u5357\u79fb\u52a8-\u8d44\u6599\u6574\u7406", "date": "2025-02-26T11:30:00+08.00", "path": "/archives/fuck-wuawei-hn8145xr/", "text": "\u524d\u8a00\n\u672c\u4eba\u6709\u5e78\u7528\u4e0a\u4e86 \u6cb3\u5357\u79fb\u52a8 \u7f51\u7edc\u63a5\u5165\uff0c\u6211\u4eec\u4e95\u76d6\u7701\u7684\u7f51\u7edc\u5c01\u95ed\u7a0b\u5ea6\u4e00\u76f4\u662f\u5185\u5730\u7701\u4efd\u4e2d\u6570\u4e00\u6570\u4e8c\u3002\u76f8\u5173\u8f6f\u4ef6\u4f1a\u653e\u5728 fuck-wuawei-modem\u8fd8\u539f\u53ef\u7528\u7684Shell\u73af\u5883\n\n\u6765\u6e90: \u5206\u4eabHN8145XR\u5f00telnet\u53ca\u8865\u5168shell\u4e2a\u4eba\u5fc3\u5f97Telnet\u7528\u6237\uff1aroot\nTelnet\u5bc6\u7801\uff1aadminHW, Hw8@cMcc \u7b49\n\n\u542f\u52a8 ONT_telnet_enable.exe\n\u7f51\u7ebf\u8fde\u63a5\u5149\u732b\u548c\u7535\u8111/\u7b14\u8bb0\u672c\n\u6253\u5f00\u4f7f\u80fd\u5de5\u5177\uff0c\u9009\u62e9\u5bf9\u5e94\u6709\u7ebf\u7f51\u5361\uff0c\u5c55\u5f00\u8bbe\u5907\u5217\u8868\n\u65ad\u5f00\u5149\u732b\u7535\u6e90\n\u9009\u62e9\u201cV5\u4f7f\u80fd\u201d\uff0c\u70b9\u51fb\u542f\u52a8\n\u6062\u590d\u5149\u732b\u7535\u6e90\uff0c\u7b49\u5f85\u51fa\u73b0\u201cFailed\u201d\u5b57\u6837\uff0c\u4e0d\u7528\u7ba1\uff1b\u5f85\u5230\u5149\u732bLED\u706f\u5168\u90e8\u7184\u706d\uff0c\u70b9\u51fb\u505c\u6b62\u3002\u4e0d\u8981\u9000\u51fa\u4f7f\u80fd\u5de5\u5177\n\n\n\u6b64\u5904\u53ef\u4ee5\u68c0\u67e5 telnet \u662f\u5426\u5df2\u7ecf\u53ef\u4ee5\u8fde\u63a5\u3002\n\n\u9009\u62e9\u201c\u5347\u7ea7\u201d\uff0c\u7248\u672c\u5305\u9009\u62e9 shell9.bin\n\u70b9\u51fb\u5f00\u59cb\uff0c\u518d\u6b21\u91cd\u542f\u5149\u732b\u7535\u6e90\n\u7b49\u5f85\u5149\u732bLED\u518d\u6b21\u5168\u90e8\u7184\u706d\uff08\u9664\u4e0b\u884c\u5149\uff09\uff0c\u51fa\u73b0 \u201cFailed\u201d \uff0c\u70b9\u51fb\u505c\u6b62\uff0c\u9000\u51fa\u4f7f\u80fd\u5de5\u5177\u3002\n\n\u57fa\u4e8eTelnet\u83b7\u53d6\u8d85\u7ba1\u5bc6\u7801\n\n\u53c2\u8003\uff1a\u901a\u8fc7telnet\u53d6\u5f97\u534e\u4e3aHN8145XR\u8d85\u7ea7\u5bc6\u7801\ntelnet 192.168.1.1\n# -&gt; root\n# -&gt; (telnet\u5bc6\u7801)\nsu\nshell\ncd /mnt/jffs2/\ncp hw_ctree.xml myconf.xml.gz\naescrypt2 1 myconf.xml.gz tmp # \u6b64\u5904tmp\u88ab\u5ffd\u7565\u4e86\nzcat myconf.xml.gz  | grep &#39;UserName=&quot;CMCCAdmin&quot;&#39; | cut -d &quot; &quot; -f 5 | cut -d = -f 2\n\n\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7ed3\u679c\uff1aPassword=&quot;$2...............$&quot;\n\n\u4f7f\u7528 WW_Dollar2.exe \uff0c\u70b9\u51fb\u8ba1\u7b97\uff0c\u53ef\u4ee5\u89e3\u5bc6 $2 \u5bc6\u6587\u3002\u5f97\u5230\u7684\u5bc6\u6587\u53ef\u4ee5\u9700\u8981\u62fc\u63a5\u4e0a CMCCAdmin / CMCCAdmin# \uff0c\u5982\u679c\u662f\u4e2d\u56fd\u79fb\u52a8\u7248\u4f5c\u8005\u8fd9\u91cc\u5f97\u5230\u4e86\u4e00\u4e32sha256sum (-_-||| ) \u8fd8\u597d\u662f\u7535\u8bdd\u8981\u7684\u5bc6\u7801\u8003\u8651\u5230\u6cb3\u5357\u79fb\u52a8\u7684\u505a\u6cd5\u662f CMCCAdmin + \u516b\u4f4d\u968f\u673a\u5b57\u7b26\uff0c\u76ee\u524d\u65f6\u4ee3\u4e2a\u4eba\u7b97\u529b\u6682\u4e0d\u53ef\u80fd\u7206\u7834\u3002\u4ecehash\u540e\u7684\u5bbd\u5e26\u5bc6\u7801/\u8d85\u7ea7\u5bc6\u7801\u8ba1\u7b97\u539f\u5bc6\u7801\n\n\u6765\u6e90\uff1aPurePeace \u7684 \u83b7\u53d6\u79fb\u52a8\u5149\u732b\uff08\u5982HS8545M5\u7b49\u8bbe\u5907\uff09pppoe\u5bc6\u7801\u660e\u6587\uff0c\u7565\u6709\u4fee\u6539Rust\u5199\u4e86\u4e00\u4efd\uff0c\u53ef\u4ee5\u7528\u6765\u8bd5\u8bd5\u770b\u66f4\u957f\u7684\u5bc6\u7801\n\u53e6\u5916\uff0c\u79fb\u52a8\u4f3c\u4e4e\u503e\u5411\u4e8e\u8bbe\u7f6e\u4e3a\u624b\u673a\u53f7\u540e\u516d\u4f4d\u3002\u66f4\u5efa\u8bae\u7684\u65b9\u5f0f\uff1a\u901a\u8fc7\u624b\u673a\u8425\u4e1a\u5385\u91cd\u7f6e\u5bc6\u7801\uff0c\u83b7\u53d6\u65b0\u7684 PPPoE \u62e8\u53f7\u5bc6\u7801\n\u79fb\u52a8\u53ef\u4ee5\u53d1\u9001 CZKDMM \u5230 10086\uff0c\u53d1\u9001\u77ed\u4fe1\nfrom sys import argv\nimport hashlib\n\n\ndef sha256(todo: str):\n    return hashlib.sha256(str(todo).encode()).hexdigest()\n\n\ndef md5(todo: str):\n    return hashlib.md5(str(todo).encode()).hexdigest()\n\n\ndef find_target(secret: str):\n    # \u751f\u6210\u516d\u4f4d\u5bc6\u7801\n    for value in range(1000000):\n        value = f&quot;{value:06}&quot;\n        s = sha256(md5(value))\n        if s == secret:\n            return value\n    return None\n\n\nif __name__ == &quot;__main__&quot;:\n    try:\n        secret = argv.pop(1)\n    except IndexError:\n        print(&quot;Usage:&quot;)\n        print(f&quot;    {argv[0]} &lt;sha256hashsecret&gt;&quot;)\n        exit(1)\n    target = find_target(secret)\n    print(target if target is not None else &quot;&quot;)\n\n\u6062\u590d\u534e\u4e3a\u516c\u7248\u754c\u9762\n\n\u53c2\u8003\uff1a\u6298\u817eHN8145XR\uff08\u6062\u590d\u534e\u4e3a\u754c\u9762 \u7b49\uff09\n\n\u9700\u8981\u5148\u5907\u4efd\u597d \u5bbd\u5e26\u5e10\u6237\uff0c\u5bbd\u5e26\u5bc6\u7801\uff0cONT\u8ba4\u8bc1\u5bc6\u7801\u5982\u679c\u53ea\u4fee\u6539\u754c\u9762\uff0c\u4e0d\u76f4\u63a5 restore_xxx.sh \uff0c\u53ef\u80fd\u53ef\u4ee5\u4fdd\u7559\u4e0b\u6765ONT\u8ba4\u8bc1\u5bc6\u7801\u4f5c\u8005\u7684OTN\u6ce8\u518c\u65b9\u5f0f\u662f Password\n\n\u542f\u52a8 WW_Dollar2.exe\n\u5728\u4f60\u7684\u7535\u8111\u542f\u52a8 ncat:\n\n\n\u5982\u679c\u6ca1\u6709ncat\uff0c\u53ef\u4ee5 scoop install nmap\u3002\nncat -l -p 9999 &gt; hw_boardinfo\n\n\n\u5728\u5149\u732b\uff0c\u4f7f\u7528 busybox nc \u628a hw_boardinfo \u4f20\u8fc7\u6765\uff1a\n\n\n\u6b64\u5904 192.168.1.4 \u4e3a\u7535\u8111\u7684\u5c40\u57df\u7f51IP\nbusybox nc 192.168.1.4 9999 &lt; /mnt/jffs2/hw_boardinfo\n\n\n\u5907\u4efd\u4e00\u4efd hw_boardinfo\n\u6253\u5f00 hw_boardinfo \uff0c\u4fee\u6539\uff1a\n\nobj.id = &quot;0x0000001a&quot;; obj.value = &quot;COMMON&quot;;\nobj.id = &quot;0x0000001b&quot;; obj.value = &quot;COMMON&quot;;\nobj.id = &quot;0x00000031&quot;; obj.value = &quot;NOCHOOSE&quot;;\n\n\n\u628a\u4fee\u6539\u540e\u7684 hw_boardinfo \u4f20\u56de\u8986\u76d6 /mnt/jffs2/hw_boardinfo \u548c /mnt/jffs2/hw_boardinfo.bak \u3002\n\n", "categories": [{"name": "Modem", "slug": "Modem", "permalink": "/category/Modem/"}], "tags": [{"name": "Modem", "slug": "Modem", "permalink": "/tag/Modem/"}, {"name": "CMCC", "slug": "CMCC", "permalink": "/tag/CMCC/"}]}, {"title": "\u57fa\u4e8e Xiu \u548c ffmpeg \u7684\u5c40\u57df\u7f51\u5f55\u50cf\u673a\u5e73\u66ff\u65b9\u6848", "date": "2025-02-21T13:07:00+08.00", "path": "/archives/xiu-ffmpeg-based-lan-video-recorder/", "text": "\u786c\u4ef6\u9700\u8981\n\u8def\u7531\u5668/\u65e0\u7ebf\u5149\u732b\n\n\u9700\u8981\u53ef\u4ee5\u7ed1\u5b9a MAC \u5230 LAN IP\n\n\u6444\u50cf\u5934\n\u4e10\u7248 (\u672c\u6559\u7a0b)\n\n\u4e00\u90e8\u53ef\u4ee5\u957f\u671f\u4f9b\u7535\u3001\u56fa\u5b9a\u5f55\u5236\u7684\u624b\u673a\n\u5982\u679c\u5145\u7535\u4e0d\u591f\u7a33\u5b9a\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0 ffmpeg \u5728\u624b\u673a\u91cd\u542f\u3001\u91cd\u65b0\u5f00\u59cb\u63a8\u9001\u670d\u52a1\u540e\u4ecd\u7136\u6302\u8d77\u7684\u72b6\u6001\n\n\u8003\u8651\u4e3a ffmpeg \u5bf9\u5e94\u670d\u52a1\u8bbe\u7f6e RuntimeMaxSec \u6765\u51cf\u5c11\u7a7a\u767d\u671f\n\n\u4e00\u53f0 10w-20w \u529f\u7387\u7684LED\u706f\uff0c\u63d0\u4f9b\u624b\u52a8\u8865\u5149\uff08\u4e00\u4f53\u5f0f\u7ea615~20 CNY\uff09\n\u4e00\u6839\u8db3\u591f\u7a33\u5b9a\uff0c\u4e0d\u4f1a\u6454\u574f\u4f60\u624b\u673a\u7684\u6444\u50cf\u652f\u67b6\n\n\u5bb6\u5ead\u7248\n\n\u542c\u95fb\u53ea\u6709\u4e50\u6a59\u7684\u7f51\u7edc\u6444\u50cf\u673a\u4e0d\u662f\u4e91\u5b58\u50a8\u670d\u52a1\u7684\u526f\u4ea7\u54c1,\n\u5305\u62ec rtsp\u6d41/ONVIF \u90fd\u662f\u516c\u5f00\u7684\u3002\n\n\u4e00\u53f0\u4e50\u6a59\u7f51\u7edc\u6444\u50cf\u673a\uff0c\u9700\u652f\u6301\u63a5\u5165\u4f60\u7684\u5c40\u57df\u7f51\n\n\u4f01\u4e1a\u65b9\u6848\n\n\u4e00\u53f0\u4e13\u4e1a\u7684\uff0c\u5305\u542b RTSP \u534f\u8bae\u900f\u660e\u5f15\u51fa\u7684\u201c\u4f01\u4e1a\u7528\u201d\u6ea2\u4ef7\u7684\u4e1a\u5185\u54c1\u724c\u7f51\u7edc\u6444\u50cf\u673a\n\n\u5f55\u50cf\u673a\n\n\u4e00\u53f0\u53ef\u4ee5\u957f\u671f\u4f9b\u7535\uff0c\u5e26\u6709\u505c\u7535\u65f6\u81ea\u52a8\u5173\u673a\uff08\u4f60\u7684\u7b14\u8bb0\u672c\u7535\u6c60\uff0c\u4f55\u5c1d\u4e0d\u662fUPS\uff1f\uff09\u7684\u7535\u8111\n\u6700\u597d\u5e26\u6709\u53ef\u7528\u7684\u786c\u4ef6\u89c6\u9891\u7f16\u7801\u652f\u6301\u3002\n\n\n\u672c\u6559\u7a0b\u53ea\u8003\u8651\u4e86 intel QuickSyncVideo / NVIDIA NVENC\n\u53ef\u4ee5\u81ea\u884c\u8c03\u6574 AMD \u652f\u6301\u53c2\u6570\n\n\n\u8f6f\u4ef6\u9700\u8981\n\u6444\u50cf\u624b\u673a\n\nSpyNET Camera\uff0c\u5f00\u6e90\u8f6f\u4ef6\uff0c2017\u505c\u66f4\nIP\u6444\u50cf\u5934\uff0c\u5e7f\u544a\u8f6f\u4ef6\n\n\u5f55\u50cf\u673a\n\n\u8fd0\u884c\u6709 Systemd-based \u53d1\u884c\u7248\uff0c\u6216 Windows\uff08\u81ea\u884c\u4f7f\u7528 nssm \u7ba1\u7406\u670d\u52a1\uff09\n\nXiu \u914d\u7f6e\u6587\u4ef6\n${EDITOR:-nano} ~/xiu.toml\n\n[rtmp]\nenabled = true\nport = 1935\ngop = 1\n\n[hls]\nenabled = true\nport = 8080\nneed_record = true\n\n[authsecret]\nkey = &quot;&quot;\npassword = &quot;&quot;\n\nffmpeg \u63a8\u6d41+\u65f6\u95f4\u6233\u811a\u672c\n\n\u6b64\u5904\u4ee5 nushell \u4e3a\u4f8b\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u6539\u5199\u6210 bash \u811a\u672c\u7b49\n${EDITOR:-nano} ~/rtsp-to-rtmp.nu\n\nQuickSync\n\n#!/usr/bin/nu\n\n# \u586b\u5165\u4f60\u7684 RTSP \u63a8\u6d41\u5730\u5740\nlet rtsp_addr = &quot;rtsp://192.168.xxx.xxx:8080/h264.sdp&quot;;\n# \u586b\u5165\u4f60\u7684\u6444\u50cf\u5934\u540d\u79f0\nlet camera_prefix = &quot;&quot;;\n\n(\n  ffmpeg\n  -rtsp_transport tcp # \u6307\u5b9aTCP\u534f\u8bae\n  -hwaccel qsv # QuickSyncVideo \u52a0\u901f\n  -i $rtsp_addr -framerate 30 # 30 fps\n  -c:v h264_qsv -global_quality 30 # ICQ 30\n  -f flv -ar 22050 # \u97f3\u9891\u91c7\u6837\u7387\n  ( &quot;rtmp://127.0.0.1/live/&quot; + $camera_prefix + ( date now | format date &quot;%Y-%m-%d_%H-%M-%S&quot; ))\n)\n\nNVENC\n\n#!/usr/bin/nu\n\n# \u586b\u5165\u4f60\u7684 RTSP \u63a8\u6d41\u5730\u5740\nlet rtsp_addr = &quot;rtsp://192.168.xxx.xxx:8080/h264.sdp&quot;;\n# \u586b\u5165\u4f60\u7684\u6444\u50cf\u5934\u540d\u79f0\nlet camera_prefix = &quot;&quot;;\n\n(\n  ffmpeg\n  -rtsp_transport tcp # \u6307\u5b9aTCP\u534f\u8bae\n  -hwaccel cuda # CUDA\u52a0\u901f\n  -i $rtsp_addr -framerate 30 # 30 fps\n  -c:v h264_nvenc -rc:v vbr_hq -cq 30 # CQR 30\n  -f flv -ar 22050 # \u97f3\u9891\u91c7\u6837\u7387\n  ( &quot;rtmp://127.0.0.1/live/&quot; + $camera_prefix + ( date now | format date &quot;%Y-%m-%d_%H_%M_%S&quot; ))\n)\n\nSystemd \u670d\u52a1\u9879\n\u5efa\u7acb\u76ee\u5f55\nmkdir -p ~/.local/share/systemd/user\n\nXiu\n${EDITOR:-nano} ~/.local/share/systemd/user/xiu.service\n\n[Unit]\nDescription=Xiu Service\nAfter=network-manager.service\n\n[Service]\n# user \u6539\u4e3a\u4f60\u7684\u7528\u6237\u540d\nExecStart=/usr/bin/xiu -c /home/user/xiu.toml\n# \u6b64\u76ee\u5f55\u4e3a\u5b58\u50a8 ./live/&lt;\u65f6\u95f4\u6233&gt;/*.{ts,m3u8} \u7684\u76ee\u5f55\nWorkingDirectory=/mnt/Data/monitor\nRestart=always\n\n[Install]\nWantedBy=default.target\n\nsystemctl enable --user --now xiu.service\n\nFFmpeg \u8f6c\u53d1\u6d41\n${EDITOR:-nano} ~/.local/share/systemd/user/rtmp-to-rtsp.service\n\n[Unit]\nDescription=RTSP Push to RTMP Service\nAfter=network-manager.service\n\n[Service]\n# user \u6539\u4e3a\u4f60\u7684\u7528\u6237\u540d\nExecStart=/home/user/rtsp_push_rtmp.nu\nRestart=always\n# \u6bcf\u5c0f\u65f6\u5206\u4e00\u6b21 vod_[...].m3u8\nRuntimeMaxSec=3600\n\n[Install]\nWantedBy=default.target\n\nsystemctl enable --user --now rtmp-to-rtsp.service\n\ntmpfiles.d \u6e05\u7406\u89c6\u9891\u5f55\u50cf\n\u4f8b\u5982\uff0c\u6e05\u7406\u4e09\u5929\u524d\u521b\u5efa\u7684\u76ee\u5f55/\u6587\u4ef6:e /path/to/live 0755 \u7528\u6237\u540d \u7528\u6237\u540d cC:3d -\n\n\u6ce8\u610f\uff0ccC\u5206\u522b\u8868\u793a\u6587\u4ef6\u548c\u76ee\u5f55\u7684\u521b\u5efa\u65f6\u95f4\uff0c\u4e0d\u6dfb\u52a0 cC: \u4f1a\u5bfc\u81f4\u9ed8\u8ba4\u8003\u8651\u8bbf\u95ee\u65f6\u95f4\u3002\u5c3e\u58f0\n\u73b0\u5728 xiu \u5c31\u53ef\u4ee5\u5728\u4f60\u8bbe\u7f6e\u597d\u7684\u5b58\u50a8\u4f4d\u7f6e\u81ea\u52a8\u4ea7\u51fa\u52a8\u6001 .m3u8 \u6587\u4ef6\u548c\uff08\u6bcf\u5f53 Xiu\u9000\u51fa/\u4e32\u6d41\u505c\u6b62\u63a8\u5f80Xiu \u65f6\u751f\u6210\uff09\u7684\u603b vod_&lt;...&gt;.m3u8 \u3002\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5c06 H264 \u7f16\u7801\u7684 *.ts \u6587\u4ef6\u5408\u5e76\u4e3a .mp4 \u683c\u5f0f\uff0c\u4ee5\u4f7f mpv \u53ef\u4ee5\u6b63\u5e38seek\u89c6\u9891\u3002\u4f7f\u7528 nushell \u811a\u672c\uff1a\n# \u6b64\u5904\u6539\u4e3a\u4f60\u7684\u89c6\u9891\u5b58\u50a8\u8def\u5f84\ncd /path/to/live\n\nfor $it in (fd '^vod_.*\\.m3u8$' | lines) {\n    # \u63d0\u53d6\u6587\u4ef6\u540d\u90e8\u5206\uff0c\u8fd9\u91cc\u662f\u914d\u5408\u4ea7\u751f\u7684 `&lt;\u65f6\u95f4\u6233&gt;/vod_&lt;\u65f6\u95f4\u6233&gt;.m3u8` \u8def\u5f84\u683c\u5f0f\n    let name = ($it | str replace --regex &quot;/.*&quot; &quot;&quot;);\n\n    # \u5408\u5e76 .m3u8 \u89c6\u9891\uff0c\u4e0d\u8fdb\u884c\u91cd\u7f16\u7801\n    ffmpeg -i $it -codec copy ($name + &quot;.mp4&quot;)\n\n    # \u6e05\u7406\u5408\u5e76\u6210\u529f\u7684 .ts \u89c6\u9891\u5206\u7247\n    if ($env.LAST_EXIT_CODE == 0) {\n        rm -rf $name\n    }\n}\n\n\u64ad\u653e\u89c6\u9891\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528NuShell\u811a\u672c\uff1a\nlet prefix = &quot;&quot;;\nlet output = $prefix + &quot;temp.m3u&quot;;\n\n# \u6b64\u5904\u53ef\u4ee5\u81ea\u884c\u586b\u5199\u5e74\u4efd\uff0c\u6708\u4efd\uff0c\u65e5\u671f\uff0c\u5c0f\u65f6\u7b49\nlet pattern = '^' + $prefix + '....-..-.._.._.._..\\.mp4$';\n\nfd $pattern out&gt; $output\nmpv $output\n\n", "categories": [{"name": "RTMP", "slug": "RTMP", "permalink": "/category/RTMP/"}], "tags": [{"name": "RTSP", "slug": "RTSP", "permalink": "/tag/RTSP/"}, {"name": "RTMP", "slug": "RTMP", "permalink": "/tag/RTMP/"}, {"name": "ffmpeg", "slug": "ffmpeg", "permalink": "/tag/ffmpeg/"}, {"name": "webcam", "slug": "webcam", "permalink": "/tag/webcam/"}]}, {"title": "Android \u5982\u4f55\u4fdd\u6301\u773c\u4e2d\u5b58\u50a8\u5e72\u51c0", "date": "2024-11-28T13:27:00+08.00", "path": "/archives/android-make-storage-clean/", "text": "\u5b58\u50a8\u7a7a\u95f4\u9694\u79bb\n\n\u7531 RikkaApps \u5f00\u53d1\u3002\u7531\u4e8e\u57fa\u4e8e\u76ee\u5f55\u91cd\u5b9a\u5411\uff0c\u5783\u573e\u6587\u4ef6\u5b9e\u9645\u4e0a\u662f\u653e\u5728\u4e86\u72ec\u7acb\u7684\u7a7a\u95f4\n\u4f18\u70b9\n\n\u8f83\u4e3a\u53ef\u63a7\u7684\u76ee\u5f55\u9650\u5236\n\u53ef\u4ee5\u963b\u6b62\u8bbf\u95ee\u4e3b\u7528\u6237\u9690\u79c1\u6570\u636e\n\u4e0d\u540c\u5e94\u7528\u4e4b\u95f4\uff0c\u65e0\u6cd5\u57fa\u4e8e\u5185\u7f6e\u5b58\u50a8\u4e2d\u7684\u5783\u573e\u6587\u4ef6\u8ffd\u8e2a\u7528\u6237\n\n\u7f3a\u70b9\n\n\u4ed8\u8d39\u95ed\u6e90\u8f6f\u4ef6\n\u9700\u8981 Magisk/KernelSU/Xposed\n\u5e38\u5e74\u672a\u66f4\u65b0\uff0cAndroid 14+ \u652f\u6301\u672a\u6765\u582a\u5fe7\n\u975e Google Play \u6e20\u9053\u8d2d\u4e70\uff0c\u5747\u4e3a\u9650\u5236\u5355\u624b\u673a\u4f7f\u7528\n\nMaterialCleaner\n\n\u7c7b\u4f3c #\u5b58\u50a8\u7a7a\u95f4\u9694\u79bb\u8fd9\u4e2a\u9879\u76ee\u88ab\u201c\u9177\u5b89\u5927\u795e\u201d\u641e\u6b7b\u4e86\uff0c\u517c\u5bb9\u6027\u95ee\u9898\u6bd4\u8f83\u5927\nIsLand\n\n\u5f00\u53d1\u8005\u540c\u300a\u7eff\u8272\u5b88\u62a4\u300b\u9694\u79bb\u73af\u5883\uff0c\u628a\u56fd\u4ea7\u8f6f\u4ef6\u585e\u4e00\u8d77\uff1b\u57fa\u4e8eWork Profile\u5b9e\u73b0\uff0c\u56fd\u4ea7ROM\u517c\u5bb9\u6027\u4e0d\u4e00\u5b9a\u597d\n\u4f18\u70b9\n\n\u4e5f\u53ef\u7528\u4e8e\u53cd\u53d6\u8bc1\n\u5355\u7a7a\u95f4\u4f7f\u7528\uff0c\u65e0\u9700 Root\n\u53ef\u4ee5\u963b\u6b62\u8bbf\u95ee\u4e3b\u7528\u6237\u9690\u79c1\u6570\u636e\n(root+\u653e\u5f03\u652f\u4ed8\u8f6f\u4ef6) \u4e0d\u540c\u5e94\u7528\u4e4b\u95f4\uff0c\u65e0\u6cd5\u57fa\u4e8e\u5185\u7f6e\u5b58\u50a8\u4e2d\u7684\u5783\u573e\u6587\u4ef6\u8ffd\u8e2a\u7528\u6237\n\n\u7f3a\u70b9\n\n\u65b0\u7248\u672c\u8f6c\u4e3a\u95ed\u6e90\u8f6f\u4ef6\n\u9700\u8981Root\u624d\u80fd\u5f00\u542f\u591a\u4e2a\u5de5\u4f5c\u8d44\u6599\uff0c\u4e92\u76f8\u9694\u79bb\u4e0d\u540c\u56fd\u4ea7\u5e94\u7528\n\u8f93\u5165\u6cd5\u3001\u652f\u4ed8\u5e94\u7528\u8c03\u7528\u90fd\u662f\u5206\u5272\u7684\uff0c\u8fd9\u4e00\u70b9\u4f1a\u5f71\u54cd\u4e0a\u4e00\u6761\n\nInsular\n\n#IsLand \u7684\u5f00\u6e90\u590d\u523b\u5b9e\u73b0\u3002\nblack_and_white_list\n\n\u4ee3\u7801\u8d28\u91cf\u6781\u5dee\uff0c\u4f46\u662f\u76ee\u524d\u6ca1\u4eba\u5199\u7c7b\u4f3c\u7684\u6253\u5305\u4e86\u7684\u4e1c\u897f\u5b9a\u671f\u6e05\u7406\uff0c\u6700\u539f\u59cb\u7684\u65b9\u5f0f\n\u4f18\u70b9\n\n\u8f83\u4e3a\u7075\u6d3b\n\u63d0\u4f9b\u4e86\u767d\u540d\u5355\uff0c\u907f\u514d\u8bef\u5220\n\u5e94\u7528\u65e0\u5173\uff0c\u5355\u7eaf\u5199\u8def\u5f84\u89c4\u5219\n\u4e0d\u540c\u5e94\u7528\u4e4b\u95f4\uff0c\u65e0\u6cd5\u57fa\u4e8e\u5185\u7f6e\u5b58\u50a8\u4e2d\u7684\u5783\u573e\u6587\u4ef6\u8ffd\u8e2a\u7528\u6237\n\n\u7f3a\u70b9\n\n\u4e45\u5e74\u672a\u66f4\n\u672a\u63d0\u4f9b\u56fe\u5f62\u5316\u8bbe\u7f6e\u65b9\u5f0f\n\u914d\u7f6e\u6587\u4ef6\u4e3a\u672a\u77e5\u6587\u672c\u89e3\u6790\u65b9\u5f0f\n\u4f9d\u8d56 Magisk \u548c\u5927\u91cf\u4e0d\u89c4\u8303\u884c\u4e3a\n\u57fa\u4e8e crond \uff0c\u53e4\u8001\u7684\u5b9a\u65f6\u670d\u52a1\u65b9\u5f0f\n\ngarbage-remove\n\nRust\u5b9e\u73b0\u540c\u6837\u662f\u5b9a\u671f\u6e05\u7406\n\u4f18\u70b9\n\n\u65e0\u9700Root\n\u9ad8\u6027\u80fd\uff0c\u9ad8\u53ef\u8bfb\u65e5\u5fd7\n\u914d\u7f6e\u6587\u4ef6\u4e3a toml \u683c\u5f0f\n\u9ed8\u8ba4\u4e0d\u5141\u8bb8\u5220\u9664\u76f8\u5bf9\u8def\u5f84\n\u4e0d\u540c\u5e94\u7528\u4e4b\u95f4\uff0c\u65e0\u6cd5\u57fa\u4e8e\u5185\u7f6e\u5b58\u50a8\u4e2d\u7684\u5783\u573e\u6587\u4ef6\u8ffd\u8e2a\u7528\u6237\n\n\u7f3a\u70b9\n\n\u672a\u63d0\u4f9b\u56fe\u5f62\u5316\u8bbe\u7f6e\u65b9\u5f0f\n\u8fc7\u5ea6\u4f18\u5316\u7684\u5b9e\u73b0\uff0c\u4f7f\u7528mpmc+\u591a\u7ebf\u7a0b\u5220\u9664\n\u672a\u63d0\u4f9b\u6a21\u5757\u670d\u52a1\u65b9\u5f0f\u8fd0\u884c\uff0c\u9700\u8981\u624b\u52a8\u4fdd\u6d3b\n\n\u4e70\u53f0 iPhone \u5907\u7528\u673a\n\n\u7ec8\u6781\u65b9\u6848\uff0c\u957f\u4e45\u6709\u6548\n\u4f18\u70b9\n\n\u9690\u79c1\u4fdd\u62a4\u6700\u597d\u7684\u65b9\u5f0f\n\u7701\u5fc3\uff0c\u4e0d\u4f1a\u9047\u5230\u5404\u79cd\u98ce\u63a7\u8fc7\u4e0d\u53bb\n\u73af\u5883\u7269\u7406\u9694\u79bb\uff0c\u4e0d\u518d\u62c5\u5fc3\u4fa7\u6f0f\u68c0\u6d4b\n\n\u7f3a\u70b9\n\n\u6210\u672c\u8f83\u9ad8\n\n", "categories": [{"name": "Android", "slug": "Android", "permalink": "/category/Android/"}], "tags": [{"name": "Android", "slug": "Android", "permalink": "/tag/Android/"}, {"name": "Magisk", "slug": "Magisk", "permalink": "/tag/Magisk/"}, {"name": "KernelSU", "slug": "KernelSU", "permalink": "/tag/KernelSU/"}, {"name": "Xposed", "slug": "Xposed", "permalink": "/tag/Xposed/"}, {"name": "Storage_Management", "slug": "Storage_Management", "permalink": "/tag/Storage_Management/"}]}, {"title": "QEMU\u8fd0\u884cWindows\u542f\u7528\u5b89\u5168\u542f\u52a8", "date": "2024-03-07T19:08:00+08.00", "path": "/archives/windows-qemu-guest-enable-secure-boot/", "text": "\u9009\u9879\n\u4ece Debian ovmf \u63d0\u53d6 OVMF_VARS_4M.ms.fd 1\uff0c\u4f7f\u7528\u4efb\u610f\u53d1\u884c\u7248\u63d0\u4f9b\u7684 OVMF_CODE.secboot.4m.fd \uff1aqemu ... \\\n  -drive if=pflash,format=raw,readonly=on,file=OVMF_CODE.fd \\\n  -drive if=pflash,format=raw,file=OVMF_VARS.ms.fd \\\n  -machine pc-q35-8.2\n\n\u5176\u4e2d -machine \u662f\u6307\u5b9a\u4e00\u79cd\u652f\u6301 SecureBoot \u7684\u673a\u5668\u578b\u53f7\u6548\u679c\nqemu-windows-sb\n\nhttps://bbs.archlinux.org/viewtopic.php?id=275691&#8617;\n\n\n", "categories": [{"name": "Win32", "slug": "Win32", "permalink": "/category/Win32/"}], "tags": [{"name": "Win32", "slug": "Win32", "permalink": "/tag/Win32/"}, {"name": "SecureBoot", "slug": "SecureBoot", "permalink": "/tag/SecureBoot/"}, {"name": "QEMU", "slug": "QEMU", "permalink": "/tag/QEMU/"}]}, {"title": "Win32 \u76d8\u7b26\uff0c\u8bbe\u5907\u53f7\u548c\u786c\u76d8\u578b\u53f7", "date": "2024-02-06T18:23:00+08.00", "path": "/archives/win32-drive-letters-deviceid-harddisk-model/", "text": "\u539f\u53d1\u5e03\u5730\u5740\n\u539fIssue\u8bc4\u8bba\uff0c\u8ba8\u8bba KDiskMark Windows \u652f\u6301\u9700\u8981\u7684\u5de5\u4f5c\u5217\u51fa\u8bbe\u5907\n\u903b\u8f91\u8bbe\u5907\nGetLogicalDrives \u4f1a\u8fd4\u56de\u4e00\u7ec4\u4f4d\u7801\uff0c\u503c\u4e3a1\u7684\u4f4d\u7684\u4f4d\u7f6e\u52a0\u4e0a'A'\u5c31\u662f\u5b83\u4ee3\u8868\u7684\u76d8\u7b26from win32api import GetLogicalDrives\n\n# for example, `0b_1100` means there are C:/ and D:/.\ndef logical_drives():\n   bit_mask = GetLogicalDrives()\n   for offset in range(26):\n      alphabet = chr(ord(&#39;A&#39;) + offset)\n      if (1 &lt;&lt; offset) &amp; bit_mask:\n          yield alphabet\n\n\u5377\n\u4f7f\u7528 Powershell1:\nGet-Volume\n\n\u4f7f\u7528 mountvol.exe\n\nmountvol /L\n\n\u4f7f\u7528 FindFirstVolumeW and FindNextVolumeW\nfrom winsys._kernel32 import FindFirstVolume, FindNextVolume\nhandle, first = FindFirstVolume()\nvolumes = [first]\n\nwhile (volume := FindNextVolume(handle)) and isinstance(volume, str):\n    volumes.append(volume)\n\nprint(volumes)\n\n\u83b7\u53d6\u786c\u76d8\u578b\u53f7\n\u76d8\u7b26 -&gt; \u786c\u76d8\u578b\u53f7\n\u4f7f\u7528 Powershell2\nGet-Disk (Get-Partition -DriveLetter &#39;C&#39;).DiskNumber | select -Prop FriendlyName\n\n\u76d8\u7b26\u6216\u4efb\u610f\u5377 -&gt; \u8bbe\u5907\u53f7\n\u4f7f\u7528 Powershell \uff08\u53ea\u652f\u6301\u76d8\u7b26\uff09\n(Get-Partition -DriveLetter &#39;C&#39;).DiskNumber\n\n\u4f7f\u7528 IOCTL_STORAGE_GET_DEVICE_NUMBER\n#include &lt;stdio.h&gt;\n#include &lt;Windows.h&gt;\n#include &lt;fileapi.h&gt;\n#include &lt;winioctl.h&gt;\n\nint get_disk_number_by_drive_letter(char letter) {\n    char logical_drive_path[7];\n    sprintf(logical_drive_path, &quot;\\\\\\\\.\\\\%c:&quot;, letter);\n    // &#39;\\\\?\\Volume{&lt;GUID&gt;}&#39; is also applicable to this\n    HANDLE hDevice = CreateFileA(logical_drive_path, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);\n    if (hDevice == INVALID_HANDLE_VALUE) {\n        fprintf(stderr, &quot;Failed to open device. Error code: %lu\\n&quot;, GetLastError());\n        return -1;\n    }\n\n    STORAGE_DEVICE_NUMBER device_number;\n    DWORD bytes_returned;\n    if (!DeviceIoControl(hDevice, IOCTL_STORAGE_GET_DEVICE_NUMBER, NULL, 0, &amp;device_number, sizeof(device_number), &amp;bytes_returned, NULL)) {\n        fprintf(stderr, &quot;IOCTL_STORAGE_GET_DEVICE_NUMBER failed. Error code: %lu\\n&quot;, GetLastError());\n        CloseHandle(hDevice);\n        return -1;\n    }\n\n    CloseHandle(hDevice);\n    return device_number.DeviceNumber;\n}\n\n\u8bbe\u5907\u53f7 -&gt; \u786c\u76d8\u578b\u53f7\n\u4f7f\u7528 Powershell\nGet-Disk | select -Prop Number,FriendlyName\n\n\u4f7f\u7528 wmic\n\nwmic diskdrive get index,model\n\n\u4f7f\u7528 wmi\nfrom win32com.client import GetObject\n\ndef get_diskdrive_info():\n    wmi = GetObject(r&quot;winmgmts:\\\\.\\root\\cimv2&quot;)\n    disks = wmi.ExecQuery(&quot;SELECT * FROM Win32_DiskDrive&quot;)\n\n    disk_info = {disk.Index: disk.Model for disk in disks}\n    return disk_info\n\ndisk_info = sorted(get_diskdrive_info().items())\n\nfor index, model in disk_info:\n    print(f&quot;{index}: {model}&quot;)\n\nAnyway, the most accurate way is to call smartctl ... X:\u5176\u4ed6\u53ef\u80fd\u8981\u7528\u5230\u7684\u7cfb\u7edf\u8c03\u7528\nQueryDosDeviceW \u53ef\u4ee5\u7528\u6765\u4ece\u76d8\u7b26\u83b7\u53d6\u5377\u7f16\u53f7\uff08\u4e5f\u53ef\u4ee5\u7528\u6765\u5217\u51fa\u5377\uff0c\u5982\u679c\u4f20\u5165None\uff09\uff0c\u5373 \\Device\\HarddiskVolumeX \u4e2d\u7684 X \u3002GetDiskFreeSpaceExA \u53ef\u4ee5\u62ff\u5230\u5bf9\u8c03\u7528\u7528\u6237\u53ef\u7528\u7684\u7a7a\u95f4\uff08\u8be6\u89c1\u914d\u989d\uff09\uff0c\u603b\u786c\u76d8\u5927\u5c0f\u548c\u603b\u53ef\u7528\u7a7a\u95f4\u3002from win32file import GetDiskFreeSpaceEx\nlist(map(lambda size: size / (1024**3), GetDiskFreeSpaceEx(&quot;C:&quot;)))\n# [58.516212463378906, 117.97948837280273, 58.516212463378906]\n\n\n\u5c3e\u58f0\n\u611f\u8c223\u7684 Win32 Paths \u89e3\u91ca\n\nhttps://winreg-kb.readthedocs.io/en/latest/sources/system-keys/Mounted-devices.html#notes)&#8617;\nhttps://superuser.com/a/1147305&#8617;\nhttps://chrisdenton.github.io/omnipath/Overview.html&#8617;\n\n\n", "categories": [{"name": "Win32", "slug": "Win32", "permalink": "/category/Win32/"}], "tags": [{"name": "Win32", "slug": "Win32", "permalink": "/tag/Win32/"}, {"name": "Storage_Management", "slug": "Storage_Management", "permalink": "/tag/Storage_Management/"}]}, {"title": "\u8f6fRAID vs \u786cRAID", "date": "2023-02-24T22:08:00+08.00", "path": "/archives/software-raid-versus-hardware-raid/", "text": "Credit\n\u539f\u6587\u5730\u5740\u6b63\u6587\n\u4e00\u4e2a\u5f88\u5bb9\u6613\u5f15\u8d77\u4e89\u8bba\u7684\u95ee\u9898\uff1a\u786cRAID\u548c\u8f6fRAID\u54ea\u4e2a\u66f4\u5feb\u548c\uff08\u6216\uff09\u66f4\u597d\uff1f\u5f88\u591a\u4f20\u7edf\u89c2\u70b9\u8ba4\u4e3a\u662f\u786cRAID\uff0c\u4f46\u6211\u5f88\u4e0d\u540c\u610f\u3002\u8ba9\u6211\u4eec\u95ee\u4e00\u4e2a\u76f8\u53cd\u7684\u95ee\u9898\uff1a\u786c\u4ef6RAID\u5982\u4f55\uff08\u6216\u4f55\u65f6\uff09\u6bd4\u8f6f\u4ef6RAID\u5feb\uff1f\u5982\u679c\u4f60\u8981\u7528RAID-5\uff0c\u786c\u4ef6\u53ef\u4ee5\u6bd4\u4f60\u7684CPU\u66f4\u5febXOR\u3002\u4f46\u662f\uff0c\u5728\u73b0\u4ee3\u7cfb\u7edf\u4e2d\uff0cXOR\u7684\u6027\u80fd\u57fa\u672c\u4e0a\u53d7\u5236\u4e8e\u5185\u5b58\u5e26\u5bbd\uff0c\u800c\u4e0d\u662fCPU\u7684\u80fd\u529b\u3002\u4f60\u53ef\u80fd\u6709\u6bd4CPU\u66f4\u597d\u7684\u5185\u5b58\u5e26\u5bbd\uff08\u663e\u5361\u5c31\u662f\u8fd9\u6837\uff09\uff0c\u4f46\u8fd9\u5e76\u4e0d\u4fbf\u5b9c\u3002\u5982\u679c\u4f60\u8981\u7528RAID-1\uff0c\u786c\u4ef6RAID\u53ef\u4ee5\u51cf\u5c11\u5199\u7684\u603b\u7ebf\u5e26\u5bbd\uff0c\u4eceN\u4e2aDMA\u4f20\u8f93\u5230N\u4e2a\u78c1\u76d8\u5230\u4e00\u4e2aDMA\u4f20\u8f93\u5230\u81ea\u5df1\u3002\u4f46\u662f\uff0c\u4e3a\u4e86\u4f7f\u4f60\u7684\u7cfb\u7edf\u66f4\u5feb\uff0c\u4f60\u9700\u8981\u7528\u5199\u6d41\u91cf\u4f7fPCI\u603b\u7ebf\u5e26\u5bbd\u9971\u548c\uff0c\u8fd9\u5e76\u4e0d\u5e38\u89c1\u3002(\u7406\u8bba\u4e0a\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728RAID-5\u4e2d\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff09\u3002\u5c31\u662f\u8fd9\u6837\u3002(\u6b22\u8fce\u8865\u5145\u548c\u66f4\u6b63\uff09\u901a\u5e38\u7684\u53cd\u9a73\u662f\uff0c\u867d\u7136\u786c\u4ef6RAID\u53ef\u80fd\u4e0d\u6bd4\u8f6f\u4ef6RAID\u5feb\uff0c\u4f46\u81f3\u5c11\u628a\u8d1f\u8377\u4ece\u4f60\u7684\u4e3bCPU\u4e0a\u8f6c\u79fb\u4e86\uff0c\u6240\u4ee5\u7cfb\u7edf\u7684\u6574\u4f53\u901f\u5ea6\u63d0\u9ad8\u4e86\u3002\u7136\u800c\uff0c\u8981\u8fbe\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f60\u7684\u7cfb\u7edf\u9700\u8981\u5728CPU\u65b9\u9762\u5f88\u5dee\uff0c\u5e76\u4e14\u8981\u505a\u5927\u91cf\u7684\u5199\u5165IO\uff08\u5982\u679c\u4f60\u7684\u5199\u5165IO\u4e0d\u662f\u7279\u522b\u591a\uff0c\u90a3\u4e48\u8f6fRAID\u7684\u989d\u5916CPU\u4f7f\u7528\u7387\u4e5f\u4f1a\u5f88\u5c0f\uff09\u3002\u8fd9\u79cd\u60c5\u51b5\u4e5f\u4e0d\u592a\u5e38\u89c1\u3002\u8f6f\u4ef6RAID\u6709\u4e00\u4e2a\u7f3a\u70b9\uff1a\u542f\u52a8\u64cd\u4f5c\u7cfb\u7edf\u540e\u624d\u53ef\u4ee5\u4f7f\u7528\u3002\u8fd9\u4f1a\u4f7f\u65e9\u671f\u542f\u52a8\u53d8\u5f97\u590d\u6742\u3002\u4f46\u8f6f\u4ef6RAID\u4e5f\u6709\u5f88\u591a\u4f18\u70b9\uff0c\u5982\u4e0d\u4f9d\u8d56\u786c\u4ef6\u3002\nThe one wildcard I can see in hardware RAID's favour is virtualization, which might deliver a future of heavily used hardware running close to both CPU and IO saturation.\n\u6211\u8ba4\u4e3a\u865a\u62df\u5316\u662f\u786cRAID\u7684\u4f18\u52bf\u6240\u5728\uff0c\u53ef\u4ee5\u5e2e\u4f60\u538b\u69a8\u786c\u4ef6\uff0c\u8fbe\u5230CPU\u548cIO\u9971\u548c\u3002DeepL\u7ffb\u8bd1\u540e\u6da6\u8272\u3002", "categories": [{"name": "RAID", "slug": "RAID", "permalink": "/category/RAID/"}], "tags": [{"name": "RAID", "slug": "RAID", "permalink": "/tag/RAID/"}, {"name": "Storage_Management", "slug": "Storage_Management", "permalink": "/tag/Storage_Management/"}]}, {"title": "C23\u7279\u6027\u7b80\u4ecb", "date": "2022-10-01T17:38:00+08.00", "path": "/archives/c23-quickview/", "text": "\u5dee\u5f02\n\u79fb\u9664\n\u6570\u636e\u7c7b\u578b\n\n2\u7684\u8865\u7801\u4ee5\u5916\u7684\u6709\u7b26\u53f7\u6574\u6570\n\n\u8bed\u8a00\u7279\u6027\nK&amp;R\u98ce\u683c\u51fd\u6570\u58f0\u660e\u4e0e\u5b9a\u4e49\n\u6bd4\u5982 int main()\uff0c\u662f\u7ecf\u5e38\u88ab\u4f7f\u7528\u7684\u65e7\u5f0f\u5199\u6cd5\u3002\u6216\u8005int add1(value)\nint value;\n{\n  return value + 1;\n}\n\n\n\u4e0d\u518d\u5141\u8bb8u/U\u524d\u7f00\u7684\u5b57\u7b26\u4e32\u5b57\u9762\u91cf/\u5b57\u7b26\u5e38\u91cf\u4e3a\u975eUTF-16/32\u5b57\u7b26\n__alignof_is_defined \u548c __alignas_is_defined\n\n\u6807\u51c6\u5e93\n\n\u6df7\u5408\u4f7f\u7528\u5bbd\u5b57\u7b26\u7684\u8fde\u63a5\n\u5bf9 realloc() \u4f20\u90120\u5927\u5c0f\u7684\u8c03\u7528\uff08\u5b9e\u73b0\u5b9a\u4e49\u6539\u4e3a\u672a\u5b9a\u4e49\uff09\nstatic_assert\u5b8f\uff08\u6539\u4e3a\u5173\u952e\u5b57\uff09\nthread_local\u5b8f\uff08\u6539\u4e3a\u5173\u952e\u5b57\uff09\n\n\u5e9f\u5f03\n\u6807\u51c6\u5e93\n\n&lt;stdnoreturn.h&gt;\uff0c\u53ef\u4f7f\u7528 [[noreturn]]\u6807\u5fd7\n&lt;math.h&gt; \u5b9a\u4e49\u7684\u6570\u503c\u754c\u9650INFINITY\uff0cDEC_INFINITY\uff0cNAN\uff0cDEC_NAN\uff08\u79fb\u52a8\u5230 &lt;limits.h\uff09\nasctime()\uff0c\u53ef\u4f7f\u7528 asctime_s()\nctime()\uff0c\u53ef\u4f7f\u7528 ctime_s()\n\u7279\u6027\u6d4b\u8bd5\u5b8f: __STDC_IEC_559__\uff0c__STDC_IEC_559_COMPLEX__\uff0c\n\n\u53ef\u4f7f\u7528__STDC_IEC_60559_BFP__\u548c__STDC_IEC_559_COMPLEX__\u3002\nDECIMAL_DIG\uff0c\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316long double\u53ef\u80fd\u9700\u8981\u7684\u5341\u8fdb\u5236\u7cbe\u5ea6\n__bool_true_false_are_defeined \uff08\u73b0\u5728true/false\u90fd\u6210\u4e86\u5173\u952e\u5b57\uff09\n\n\u5173\u952e\u5b57\n\n_Noreturn \u51fd\u6570\u9650\u5b9a\u7b26\n[[_Noreturn]] \u5c5e\u6027\n\n\u65b0\u589e\n\u8bed\u8a00\u7279\u6027\n\u5c5e\u6027 (attribute)\n[[fallthrough]]\n\u8868\u793a\u4ece\u8fd9\u91cc\u76f4\u843d\u662f\u6709\u610f\u7684\uff0c\u7f16\u8bd1\u5668\u4e0d\u5e94\u8b66\u544a\u3002switch (cond) {\n    case A:\n      if ([expression]) {\n          doSomething();\n          [[fallthrough]];\n      }\n    case B:\n    case C:\n      printf(&quot;Error: ...&quot;);\n      [[fallthrough]];\n    case D:\n      doSomething();\n      break;\n}\n\n[[unsequenced]]\u548c[[reproducible]]\n[[unsequenced]] \u8981\u6c42\u51fd\u6570\u65e0\u72b6\u6001\uff0c\u65e0\u526f\u4f5c\u7528\uff0c\u5e42\u7b49\uff0c\u5e76\u4e14\u72ec\u7acb\u3002\u5176\u4e2d\uff1a\n\u65e0\u72b6\u6001\uff1a\u6ca1\u6709\u5b9a\u4e49\u53ef\u4fee\u6539\u7684\u9759\u6001\u6216\u7ebf\u7a0b\u672c\u5730\u5bf9\u8c61\uff0c\u4e5f\u4e0d\u8c03\u7528\u6709\u8fd9\u79cd\u884c\u4e3a\u7684\u51fd\u6570\u3002\n\u65e0\u526f\u4f5c\u7528\uff1a\u6ca1\u6709\u53ef\u89c2\u6d4b\u7684\u526f\u4f5c\u7528\u3002\n\u5e42\u7b49\uff1a\u91cd\u590d\u7684\u6c42\u503c\u5e94\u5f53\u5f97\u5230\u540c\u6837\u7684\u7ed3\u679c\u3002\uff08\u53ef\u4ee5\u8bfb\u53d6\u5168\u5c40\u72b6\u6001\uff09\n\u72ec\u7acb\uff1a\u4e0d\u4f9d\u8d56\u53c2\u6570\u548c\u5e38\u91cf\u4ee5\u5916\u7684\u72b6\u6001\uff08\u53ef\u4ee5\u5199\u5165\u5168\u5c40\u53d8\u91cf\uff09\n\n[[reproducible]] \u5219\u53ea\u8981\u6c42\u51fd\u6570\u65e0\u526f\u4f5c\u7528\u4e14\u5e42\u7b49\u3002\n[[deprecated]]\n\n\u53ef\u901a\u8fc7(&quot;reason&quot;)\u6dfb\u52a0\u8bf4\u660e\uff1a[[deprecated(&quot;WTH are u using this&quot;)]]\n[[maybe_unused]]\n\n\u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u8981\u56e0\u4e3a\u672a\u4f7f\u7528\u8b66\u544a\u3002\n[[nodiscard]]\n\n\u8be5\u7c7b\u578b/\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e0d\u5e0c\u671b\u88ab\u76f4\u63a5\u4e22\u5f03\u3002\u5982\u9519\u8bef\u4fe1\u606f\uff0c\u6216\u8005\u7ed3\u679c\u5b58\u50a8\u5728\u8fd4\u56de\u503c\u7684\u51fd\u6570\u3002\n\u53ef\u901a\u8fc7 (&quot;reason&quot;)\u6dfb\u52a0\u8bf4\u660e\uff1a[[nodiscard(&quot;Error info should be processed&quot;)]]\u3002\n[[noreturn]]\n\n\u8be5\u51fd\u6570\u4e0d\u901a\u8fc7return\u8bed\u53e5\u6216\u8fbe\u5230\u5e95\u90e8\u8fd4\u56de\u3002\u5e94\u7528\u4e8e\u6570\u7ec4\u7684\u9650\u5b9a\u4fee\u9970\u7b26\n\u6570\u7ec4\u7c7b\u578b\u548c\u5b83\u7684\u6210\u5458\u7684\u7c7b\u578b\u73b0\u5728\u88ab\u8ba4\u4e3a\u603b\u662f\u88ab\u540c\u6837\u5730\u9650\u5b9a\n_Atomic\u9650\u5b9a\u4e0d\u53ef\u5e94\u7528\u4e8e\u6570\u7ec4\u3002\nconst int A[1] = {};\nint * ptr = A; // OK until C23\n// clang: cannot initialize a variable of type &#39;int *&#39; with an lvalue of type &#39;const int[1]&#39;\n// Note clang will apply this rule even in C89-C17\n\n\u5173\u952e\u5b57\n\n\u524d\u4e09\u9879\u53ef\u88ab\u7f16\u8bd1\u5668\u4e3a\u517c\u5bb9\u6027\u5b9a\u4e49\u4e3a\u5b8f\n\nstatic_assert\nthread_local\ntrue, false\nconstexpr \u5b58\u50a8\u5468\u671f\u4fee\u9970\u7b26/\u51fd\u6570\u4fee\u9970\u7b26\n\n\u9884\u5b9a\u4e49\u5b8f\n\n\u4e0d\u5e26message\u7684 _Static_assert \u5b8f\uff08\u73b0\u5728\u5e94\u4f7f\u7528static_assert\u5173\u952e\u5b57\uff09\nunreachable()\uff0c\u8868\u793a\u4ee3\u7801\u4e0d\u53ef\u8fbe\u3002\n\n#include &lt;stdint.h&gt;\n#include &lt;stddef.h&gt; // size_t and not has unreachable()\n\ntypedef struct color { uint8_t r, g, b, a; } color;\n\n// color_vec that works over pointer-to-array\n#define VEC_TYPE color\n#define VEC_NAME color_vec\n#include &lt;vec.h&gt;\n\nvoid generate_texture(color** p_texture, size_t square_wh) {\n    switch (square_wh) {\n    case 128: [[fallthrough]];\n    case 256: [[fallthrough]];\n    case 512: /* ... */\n        color_vec_clear(p_texture);\n        color_vec_resize_init(p_texture,\n            square_wh * square_wh,\n            (color){0, 0, 0, 0});\n        break;\n    default:\n        unreachable();\n    }\n}\n\n\u6570\u636e\u7c7b\u578b\n\n\u5341\u8fdb\u5236\u6d6e\u70b9\u7c7b\u578b\n\n_Decimal32\uff0c_Decimal64 \u4ee5\u53ca _Decimal128\u3002\n\u4f4d\u7cbe\u5ea6\u6574\u6570\uff0c_BitInt(N)\n\u4e8c\u8fdb\u5236\u6574\u6570\u5e38\u91cf\uff0c\u4ee50b/0B\u524d\u7f00\u3002\nnullptr\u5e38\u91cf\u548c\u76f8\u5173\u7684nullptr_t\u7c7b\u578b\nchar16_t \u548c char32_t \u5b57\u7b26\u4e32\u5b57\u9762\u91cf \u5fc5\u987b\u662f UTF-16 \u548c UTF-32\n\n\u5b57\u9762\u91cf\n\nu8\u524d\u7f00\u7684 UTF-8 \u5b57\u7b26\u5e38\u91cf\uff08u8'?'\u4e3a\u5355\u5b57\u8282\uff0cu8&quot;...&quot; \u4e3a unsigned char [N]\uff09\n\u6570\u5b57\u5206\u9694\u7b26 '\uff0c\u5982 114'514'1919L\n\n\u9884\u5904\u7406\u5668\u6307\u4ee4\n#embed\nconst unsigned char icon_data[] = { // unsigned char\u4e3a\u9ed8\u8ba4\u7c7b\u578b\n    #embed &quot;art.png&quot;\n};\n\nconst char blob[] = {\n    #embed char &quot;data.bin&quot; // \u5176\u4e2dchar\u4e3a\u7c7b\u578b\u540d\n};\n\nconst char qwq[] = {\n    #embed 32 &quot;/dev/urandom&quot; // \u9650\u5236\u53c2\u6570\u653e\u5728\u6587\u4ef6\u540d\u4e4b\u524d\uff1b\u6700\u591a\u53ef\u4ee5\u8bfb\u516532\u5b57\u8282\u3002\n    // \u6ce8\u610f\u8fd9\u662f\u4e0a\u754c\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u4e00\u5b9a\u4f1a\u8bfb\u5165\u8fd9\u4e48\u591a\u3002\n};\n\n\u8be5\u8d44\u6e90\u7684\u5185\u5bb9\u4ee5\u5b9e\u73b0\u5b9a\u4e49\u7684\u65b9\u5f0f\u6620\u5c04\u5230\u6570\u636e\u4e2d\uff0c\u5b83\u4e3a\u6bcf\u4e2a\u5143\u7d20\u4f7f\u7528 CHAR_BIT * sizeof(type-name) \u6bd4\u7279\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u8db3\u4ee5\u591a\u6b21\u586b\u5145\u8fd9\u4e9b\u4f4d\uff0c\u5219\u9700\u8981\u8fdb\u884cdiagnostic\u3002\u5176\u4e2d\u7c7b\u578b\u540d\u5fc5\u987b\u662f\u57fa\u672c\u6574\u6570\u7c7b\u578b\u3002\n#elifdef\n#elifndef\n#warning\n\n\u5176\u4ed6\n\n\u7a7a\u521d\u59cb\u5316\u5668 = {} \u5bf9\u4e8e\u6570\u7ec4\u6216\u81ea\u5b9a\u4e49\u6570\u636e\u7ed3\u6784\uff1a\u5bf9\u5176\u6210\u5458\u7a7a\u521d\u59cb\u5316\uff1b\u5bf9\u4e8e\u57fa\u672c\u7c7b\u578b\u53d8\u91cf\uff1a\u5bf9\u5176\u672c\u8eab\u7a7a\u521d\u59cb\u5316\u3002\n\u51fd\u6570\u5b9a\u4e49\u4e2d\u7684\u4e0d\u5177\u540d\u53c2\u6570\n\u58f0\u660e\u6216\u5757\u7ed3\u5c3e\u524d\u7684label\n\u51fd\u6570\u53c2\u6570\u5b9a\u4e49\u8f6c\u53d1\uff0c\u53ef\u80fd\u5728\u5bf9ABI\u65f6\u9700\u8981\u4f7f\u7528\u3002\n\n\u6807\u51c6\u5e93\u7279\u6027\n\u73b0\u4ee3\u7684\u4f4d\u8fd0\u7b97\u5de5\u5177\nstdbit.h\u6709\u7aef\u5e8f\u7684\u5b8f\u548c\u4e00\u4e9b\u5e38\u89c1\u7684\u4f4d\u8fd0\u7b97\u5de5\u5177\u3002printf()\u5bf9\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f\u5316\u652f\u6301\n\u6807\u51c6\u4f7f\u7528\u201c%b\u201d\u63cf\u8ff0\u7b26\u8f93\u51fa\u6574\u6570\u4e3a\u4e8c\u8fdb\u5236\u3002\u4e3a\u683c\u5f0f\u5316\u6307\u5b9a\u4f4d\u957f\n\u6807\u51c6\u5f53\u4f60\u60f3\u8981\u8f93\u51fa\u4e00\u4e2a\u5f88\u5927\u7684\u6574\u6570\uff0c\u4e4b\u524d\u7684\u53ef\u79fb\u690d\u505a\u6cd5\u662f\uff1aprintf(&quot;%jd&quot;, (intmax_t)some_integer);\n\n\u4f46\u662f int128_t \uff0c int256_t \u5f97\u4ee5\u652f\u6301\u540e\uff0c\u6211\u4eec\u4e5f\u4e0d\u80fd\u4fee\u6539\u73b0\u5b58\u5e73\u53f0\u7684 intmax_t \u5b9a\u4e49\u3002\u4e8e\u662f\uff1aprintf(&quot;%w128d&quot;, my_128b_integer);\n\n\u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a\u6253\u5370\u8be5\u6570\u5b57\u7684\u4f4e\u4f4d\uff1aprintf(&quot;%w8d&quot;, 0x114)\n\n\u5e26\u6ea2\u51fa\u68c0\u67e5\u7684\u6574\u6570\u8fd0\u7b97\n\u6807\u51c6#include &lt;stdckdint.h&gt;\n\nbool ckd_add(type1 *result, type2 a, type3 b);\nbool ckd_sub(type1 *result, type2 a, type3 b);\nbool ckd_mul(type1 *result, type2 a, type3 b);\n\n\u8fd9\u4e09\u4e2a\u51fd\u6570\u652f\u6301\u4efb\u610f\u5185\u5efa\u6574\u6570\u7c7b\u578b\u3002\u53c2\u8003\u8d44\u6599\n\ncppreference - c23\nC-ing the Improvement: Progress on C23\nEver Closer - C23 Draws Nearer\nC23 is Finished: Here is What is on the Menu\n\n", "categories": [{"name": "Programming", "slug": "Programming", "permalink": "/category/Programming/"}], "tags": [{"name": "C", "slug": "C", "permalink": "/tag/C/"}, {"name": "Language_feature", "slug": "Language_feature", "permalink": "/tag/Language_feature/"}]}, {"title": "\u4e00\u4e9b\u4e0d\u9519\u7684Rust Unstable\u7279\u6027", "date": "2021-07-28T15:04:00+08.00", "path": "/archives/awesome-unstable-rust-features/", "text": "\u6ce8\u610f\n\u672c\u6587\u539f\u6587\u53d1\u5e03\u4e8e2021-07-26\uff0c\u5176\u4e2d\u90e8\u5206\u5185\u5bb9\u53ef\u80fd\u5df2\u7ecf\u8fc7\u65f6\u3002\u8bf7\u4ee5 Rust RFC \u4e3a\u51c6\u3002\n\u5df2\u7ecf\u7a33\u5b9a\u7684\u7279\u6027\u89c1 accepted.rs\u3002\u6700\u540e\u4e00\u6b21\u66f4\u65b0\uff1a2024-02-08\u5173\u4e8e\u7ffb\u8bd1\n\u4e3b\u8981\u8bd1\u8005\uff1apoly000\uff0c\u6bd4\u90a3\u540d\u5c45\u672f\u8bed\u7ffb\u8bd1\u90e8\u5206\u53c2\u8003\u4e86 Rust \u8bed\u8a00\u672f\u8bed\u4e2d\u82f1\u6587\u5bf9\u7167\u8868\u3002\u5982\u679c\u6709\u539f\u6587\u9519\u8bef\uff0c\u8bf7\u8054\u7cfb Ethan Brierley \u4e14\u8054\u7cfb\u6211\u66f4\u65b0\u7ffb\u8bd1\u3002\u53c2\u4e0e\uff1aMaverick/demo_srcCredits\n\u539f\u6587 by Ethan Brierley\u7b80\u4ecb\n\u8fd9\u7bc7\u6587\u7ae0\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u5c1a\u4e0d\u7a33\u5b9a\u7684 Rust \u7f16\u8bd1\u5668\u7279\u6027\u3002\u6211\u5c06\u4f1a\u7b80\u5355\u53d9\u8ff0\u8fd9\u4e9b\u7279\u6027\uff0c\u5e76\u4e0d\u4f1a\u6df1\u5165\u592a\u591a\u7ec6\u8282\u3002\u4ec0\u4e48\u662fUnstable Rust\uff1f\nRust \u6709\u4e09\u4e2a\u53d1\u5e03\u7248\u672c\uff1a stable\uff0cbeta\uff0cnightly\u3002Nightly \u7f16\u8bd1\u5668\u6bcf\u5929\u90fd\u4f1a\u53d1\u5e03\uff0c\u800c\u4e14\u53ea\u6709\u5b83\u5141\u8bb8\u4f60\u542f\u7528 Unstable Rust \u7279\u6027\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u53ea\u8ba8\u8bba Unstable \u7f16\u8bd1\u5668\u7279\u6027\uff0c\u4e0d\u8ba8\u8bba\u6b64\u7248\u672c\u7684\u6807\u51c6\u5e93\u7279\u6027\u3002\n\u4e3a\u4ec0\u4e48\u8981\u7528 Unstable \u7279\u6027\uff1f\nUnstable Rust \u53ef\u4ee5\u8ba9\u4f60\u4f7f\u7528\u5728Stable Rust \u4e2d\u4e0d\u5141\u8bb8\u4f7f\u7528\u7684API\u3002\u4e3a\u6b64\uff0c\u7f16\u8bd1\u5668\u4e0e\u6807\u51c6\u5e93\u90fd\u4f7f\u7528\u4e86 Unstable \u7279\u6027\u3002\u4f7f\u7528 Unstable \u7279\u6027\u603b\u662f\u4f34\u968f\u7740\u4e00\u4e9b\u98ce\u9669\u3002\u5b83\u4eec\u7ecf\u5e38\u4f1a\u6709\u4e00\u4e9b\u4e0d\u671f\u671b\u884c\u4e3a\uff0c\u6709\u65f6\u751a\u81f3\u4f1a\u7834\u574f Rust \u7684\u5185\u5b58\u5b89\u5168\u4fdd\u8bc1\uff0c\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002\u8fd9\u4e9b\u7279\u6027\u53ef\u80fd\u5f00\u53d1\u7684\u5f88\u597d\uff0c\u4f46\u4e5f\u80fd\u672a\u5f00\u53d1\u5b8c\u5584\u3002\u4f7f\u7528Unstable\u7279\u6027\u7684 Nightly \u7f16\u8bd1\u5668\uff0c\u9047\u5230\u201c\u5185\u90e8\u7f16\u8bd1\u5668\u9519\u8bef\u201d\u5e76\u4e0d\u5c11\u89c1\uff0c\u8fd9\u79cd\u60c5\u51b5\u901a\u5e38\u79f0\u4e3aICE\u3002\u5b83\u53d1\u751f\u4e8e\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0c\u7f16\u8bd1\u5668\u5c06\u4f1apanic\u3002\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u6570\u636e\u4e0e\u67e5\u8be2\u64cd\u4f5c\u56e0\u672a\u5b8c\u6210\u7684\u7279\u6027\u800c\u88ab\u7834\u574f\uff0c\u751a\u81f3\u53ef\u80fd\u53ea\u662f\u56e0\u4e3a\u6ca1\u505a\u5b8c\u7684\u7279\u6027\u4e2d\u6253\u4e86\u4e2a todo!()\u3002\u5982\u679c\u4f60\u9047\u5230\u4e86ICE\uff0c\u68c0\u67e5\u4e00\u4e0b\u662f\u5426\u5df2\u7ecf\u88ab\u53cd\u9988\uff0c\u6ca1\u6709\u7684\u8bdd\u5c31\u628a\u5b83\u62a5\u544a\u7ed9bug tracker\u3002Rust \u4e0d\u4fdd\u8bc1\u5728\u672a\u6765\u7ee7\u7eed\u652f\u6301\u5b83\u7684 Unstable \u7279\u6027\u3002\n\u4f5c\u4e3a Rust \u5f00\u53d1\u8005\uff0c\u6211\u4eec\u4eab\u53d7\u7740\u4f18\u79c0\u7684\u5411\u4e0b\u517c\u5bb9\u6027\u4e0e\u7a33\u5b9a\u6027\uff0c\n\u800c\u542f\u7528 Unstable \u7279\u6027\u65f6\uff0cRust\u4e0d\u518d\u63d0\u4f9b\u8fd9\u4e9b\u4fdd\u8bc1\u3002\n\u4eca\u5929\u5de5\u4f5c\u7684\u7a0b\u5e8f\u53ef\u80fd\u660e\u5929\u5c31\u5bc4\u4e86\uff01\u6211\u51b3\u5b9a\u5b66\u4e60 Unstable \u7279\u6027\uff0c\u4e0d\u662f\u56e0\u4e3a\u6211\u9700\u8981\u7528\u5b83\u4eec\u53bb\u89e3\u51b3\u5b9e\u9645\u95ee\u9898\uff0c\u800c\u662f\u89c9\u5f97\u4ed6\u4eec\u5f88\u6709\u610f\u601d\u3002\n\u5bf9\u6211\u6765\u8bf4\uff0c\u4f7f\u7528 Unstable \u7279\u6027\uff0c\u53ef\u4ee5\u8ba9\u6211\u6709\u8da3\u5730\uff0c\u66f4\u591a\u7684\u53c2\u4e0e\u8bed\u8a00\u672c\u8eab\u7684\u5f00\u53d1\u8fc7\u7a0b\u3002\nUnstable \u7279\u6027\u7684\u5b8c\u6574\u5217\u8868\u89c1Unstable \u7279\u6027\u5217\u8868\u3002\n\u542f\u7528 Unstable \u7279\u6027\n\u82e5\u8981\u4f7f\u7528 Unstable \u7279\u6027\uff0c\u9996\u5148\u4f60\u9700\u8981\u5b89\u88c5 Nightly \u5de5\u5177\u94fe\uff1arustup toolchain install nightly\n\n\u4e34\u65f6\u4f7f\u7528 Nightly \u5de5\u5177\u94fe\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd0\u884ccargo\u65f6\u52a0\u4e0a +nightly\u3002&lt;rust-command&gt; +nightly &lt;args&gt;\n\n\u4f8b\u5982\uff1acargo +nightly run\n\n\u53e6\u5916\uff0c\u4f60\u53ef\u4ee5\u5c06\u4f60\u7684\u9ed8\u8ba4\u7f16\u8bd1\u5668\u6539\u4e3a Nightly \uff0c\u8fd9\u6837\u4f60\u5c31\u4e0d\u518d\u9700\u8981\u52a0\u4e0a `+nightly\u3002rustup default nightly\n\n\u5207\u6362\u5230 nightly \u7f16\u8bd1\u5668\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528 Unstable \u7279\u6027\u3002\u8ba9\u6211\u4eec\u8bd5\u4e00\u8bd5\u5427\uff01fn main() {\n    let my_box = box 5;\n}\n\n\u4f60\u4f1a\u5f97\u5230\u5982\u4e0b\u7f16\u8bd1\u9519\u8bef\uff1aerror[E0658]: box expression syntax is experimental; you can call `Box::new` instead\n --&gt; src/main.rs:2:18\n  |\n2 |     let my_box = box 5;\n  |                  ^^^^^\n  |\n  = note: see issue #49733 &lt;https://github.com/rust-lang/rust/issues/49733&gt; for more information\n  = help: add `#![feature(box_syntax)]` to the crate attributes to enable\n\nRust \u5728 help \u6d88\u606f\u4e2d\u51c6\u786e\u5730\u544a\u8bc9\u4e86\u6211\u4eec\u5e94\u8be5\u505a\u4ec0\u4e48\u2014\u2014\n\u6211\u4eec\u9700\u8981\u7528 #![feature(box_syntax)] \u542f\u7528\u8fd9\u4e2a\u7279\u6027\u3002#![feature(box_syntax)]\nfn main() {\n    let my_box = box 5;\n}\n\n\u6240\u6709 Unstable \u7279\u6027\u90fd\u9700\u8981\u7528 #![feature(..)] \u542f\u7528\u3002\n\u5373\u4f7f\u4f60\u5fd8\u8bb0\u4e86\uff0c\u7f16\u8bd1\u5668\u901a\u5e38\u4e5f\u4f1a\u6307\u51fa\u8981\u5982\u4f55\u505a\uff0c\u867d\u7136\u4e0d\u603b\u4f1a\u662f\u3002\u73b0\u5728\uff0c\u6211\u4eec\u770b\u770b\u8fd9\u4e9b\u7279\u6027\u3002\n\u6211\u628a\u9700\u8981\u542f\u7528\u7684\u7279\u6027\u540d\u79f0\u653e\u5728\u6bcf\u4e2a\u7279\u6027\u7684\u6807\u9898\u4e2d\u7684 \u4ee3\u7801\u5757 \u4e2d\uff0c\u5728\u4ee3\u7801\u7247\u6bb5\u4e2d\u7701\u7565\uff0c\u4ee5\u4fdd\u6301\u7b80\u6d01\u3002\u63a7\u5236\u6d41\u3001\u6a21\u5f0f\u548c\u5757\ndestructuring_assignment\n\n\u4e8e Rust 1.59 \u7a33\u5b9a\u3002\n\u5728Rust\u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u5728\u7ed1\u5b9a\u5230\u5b9a\u4e49\u65f6\u89e3\u6784\u67d0\u4e2a\u7c7b\u578b\u3002\n\u6211\u4eec\u4e00\u822c\u4f1a\u4f7f\u7528let\u7ed1\u5b9a\uff1a// \u521b\u5efa\u4e24\u4e2a\u53d8\u91cf, \u4e00\u4e2a\u662f x, \u4e00\u4e2a\u662f y \nlet Point { x, y } = Point::random();\n\n\u76ee\u524d\u8fd9\u79cd\u5199\u6cd5\u53ea\u5f97\u5728\u5b9e\u4f8b\u5316\u65b0\u7684\u5b9a\u4e49\u65f6\u4f7f\u7528\u3002\ndestructuring_assignment \u5c06\u5b83\u62d3\u5c55\u5230\u8d4b\u503c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u4f7f\u7528 let \u5b8c\u6210\u89e3\u6784\u3002let (mut x, mut y) = (0, 0);\n\nPoint { x, y } = Point::random();\n\n\u4ece\u4efb\u610f\u5757\u63d0\u524d\u8fd4\u56de\uff0clabel_break_value\n\n\u4e8e Rust 1.65 \u7a33\u5b9a\u3002\nRust \u6709\u4e00\u4e2a\u4e0d\u90a3\u4e48\u5e7f\u4e3a\u4eba\u77e5\u7684\u7279\u6027\uff0cloop\u53ef\u4ee5\u5e26\u503c\u9000\u51fa\u3002\n\u5c31\u50cf Rust \u4e2d\u8bb8\u591a\u5176\u5b83\u7684\u7ed3\u6784\uff0c\u5728 Rust \u4e2d loop \u5e76\u4e0d\u4ec5\u4ec5\u662f\u8bed\u53e5, \u800c\u662f\u8868\u8fbe\u5f0f\u3002// \u4fdd\u6301\u8bf7\u6c42\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\uff0c\u76f4\u5230\u4ed6\u4eec\u7ed9\u51fa\u4e00\u4e2a\u6709\u6548\u7684\u6570\u5b57\u3002\nlet number: u8 = loop {\n    if let Ok(n) = input().parse() {\n        break n;\n    } else {\n        println!(&quot;Invaid number, Please input a valid number&quot;);\n    }\n};\n\nlabel_break_value \u628a\u8fd9\u62d3\u5c55\u5230\u4efb\u4f55\u88ab\u6807\u8bb0\u7684\u5757\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f loop\u3002\n\u5b83\u7684\u884c\u4e3a\uff0c\u5c31\u50cf\u662f\u4e00\u79cd\u63d0\u524d\u7684 return \uff0c\u4e0d\u8fc7\u9002\u7528\u4e8e\u4efb\u4f55\u4ee3\u7801\u5757\uff0c\u800c\u4e0d\u53ea\u662f\u51fd\u6570\u4f53\u3002\u6807\u8bb0\u4ee3\u7801\u5757\u7684\u8bed\u6cd5\uff0c\u548c\u751f\u547d\u5468\u671f\u5f88\u76f8\u4f3c\u3002&#39;block: {\n     // \u8fd9\u4e2a\u4ee3\u7801\u5757\u73b0\u5728\u88ab\u6807\u8bb0\u4e3a &quot;block&quot; \u3002\n}\n\n\u73b0\u5728\u4e5f\u53ef\u4ee5\u7528\u540c\u6837\u7684\u65b9\u5f0f\u6807\u8bb0loop\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u6807\u7b7e\u653e\u5728 break \u540e\u9762\uff0c\u4ece\u90a3\u4e2a\u4ee3\u7801\u5757\u63d0\u524d\u8fd4\u56de\u3002let number = &#39;block: {\n    if s.is_empty() {\n      break &#39;block 0; // \u4ece\u4ee3\u7801\u5757\u63d0\u524d\u8fd4\u56de\n    }\n    s.parse().unwrap()\n}\n\n\n\u8fd9\u4e2a\u7279\u6027\u4e0d\u7b49\u4ef7\u4e8egoto\u3002\n\u5b83\u6ca1\u6709 goto \u90a3\u6837\u7684\u7834\u574f\u6027\u5f71\u54cd\uff0c\u4ed6\u53ea\u662f\u5f80\u540e\u7ee7\u7eed\u6267\u884c\uff0c\u4ece\u4e00\u4e2a\u4ee3\u7801\u5757\u4e2d\u9000\u51fa\u3002\n\u4f7f\u7528 try_blocks \u5185\u8054 ? \u64cd\u4f5c\u7b26\u7684\u529f\u80fd\n\u7248\u672c\u5f15\u5bfc\u7528\u8fd9\u4e2a\u4f8b\u5b50\u89e3\u91ca\u95ee\u53f7\u8fd0\u7b97\u7b26\u7684\u5de5\u4f5c\u65b9\u5f0f\uff1afn read_username_from_file() -&gt; Result&lt;String, io::Error&gt; {\n    let f = File::open(&quot;username.txt&quot;);\n\n    let mut f = match f {\n        Ok(file) =&gt; file,\n        Err(e) =&gt; return Err(e),\n    };\n\n    let mut s = String::new();\n\n    match f.read_to_string(&amp;mut s) {\n        Ok(_) =&gt; Ok(s),\n        Err(e) =&gt; Err(e),\n    }\n}\n\n\u4f7f\u7528 ? \u64cd\u4f5c\u7b26\u7b80\u5316\uff0c\u53ef\u4ee5\u5f97\u5230\u7b49\u6548\u7684\u4ee3\u7801\uff1afn read_username_from_file() -&gt; Result&lt;String, io::Error&gt; {\n    let mut f = File::open(&quot;username.txt&quot;)?;\n    let mut s = String::new();\n\n    f.read_to_string(&amp;mut s)?;\n\n    Ok(s)\n}\n\n? \u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u63d0\u524d\u8fd4\u56de Err\u3002\ntry_blocks \u63d0\u4f9b\u4e86\u9002\u7528\u4e8e\u4efb\u610f\u4ee3\u7801\u5757\u7684\u76f8\u540c\u529f\u80fd\u3002\n\u4f7f\u7528 try_blocks \uff0c\u6211\u4eec\u53ef\u4ee5\u5185\u8054 read_usernames_from_file \u51fd\u6570\u3002try_blocks \u548c ? \u7684\u5173\u7cfb\u5c31\u50cf\u662f label_break_value \u548c return \u7684\u5173\u7cfb\u3002\ntry_blocks \u7684RFC\u63d0\u5230\u4e86 label_break_value \uff0c\u4f5c\u4e3a try_blocks \u4e00\u79cd\u53ef\u80fd\u7684\u89e3\u7cd6\u3002\u63a5\u4e0b\u6765\u91cd\u5199\u6211\u4eec\u7684 read_username_from_file \uff0c\n\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 let \u7ed1\u5b9a\u548c try \u4ee3\u7801\u5757\u3002let read_username_from_file: Result&lt;String, io::Error&gt; = try {\n    let mut f = File::open(&quot;username.txt&quot;)?;\n    let mut s = String::new();\n\n    f.read_to_string(&amp;mut s)?;\n\n    Ok(s)\n}\n\n\u6211\u559c\u6b22\u8fd9\u4e2a\u7279\u6027\u3002\u7279\u522b\u662f\u5bf9\u4e8e\u8f83\u5c0f\u7684\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u4e0d\u63d0\u53d6\u6210\u51fd\u6570\uff0c\u53ef\u8bfb\u6027\u4f1a\u66f4\u597d\u3002inline_const\n\u76ee\u524d\uff0c\u6307\u5b9a\u67d0\u4e2a\u503c\u7f16\u8bd1\u65f6\u8ba1\u7b97\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u5e38\u91cf\u3002const PI_APPROX: f64 = 22.0 / 7.0;\n\nfn main() {\n     let value = func(PI_APPROX);\n}\n\n\u6709\u4e86 inline_const \u6211\u4eec\u53ef\u4ee5\u7528\u533f\u540d\u8868\u8fbe\u5f0f\u5b8c\u6210\u540c\u6837\u7684\u4e8b\u3002fn main() {\n     let value = func(const { 22.0 / 7.0 });\n}\n\n\u5728\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u4e2d\uff0c \u56e0\u4e3a\u7f16\u8bd1\u5668\u4f18\u5316 constant propagation\uff0cconst \u5757\u662f\u4e0d\u5fc5\u8981\u7684\u3002\n\u4f46\u662f\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u5e38\u91cf\uff0c\u7528\u5757\u6765\u8868\u793a\uff0c\u53ef\u80fd\u4f1a\u66f4\u597d\u3002\u8fd9\u4e2a\u7279\u6027\u4e5f\u5141\u8bb8\u5728const\u5757\u4e2d\u4f7f\u7528\u6a21\u5f0f\u5339\u914d\u3002\n\u5982 match x { 1 + 3 =&gt; {} } \u4f1a\u5bfc\u81f4\u8bed\u6cd5\u9519\u8bef\uff0c\u800c match x { const { 1 + 3 } =&gt; {} } \u4e0d\u4f1a\u3002if_let_guard\n\u62d3\u5c55 match \u4e2d\u7684 if \u5b88\u536b \uff0c\u4f7f\u5176\u5141\u8bb8\u4f7f\u7528 if let\u3002let_chains\n\n\u4e8e Rust 1.64 \u7a33\u5b9a\u3002\n\u76ee\u524d\uff0cif let \u548c while let \u8868\u8fbe\u5f0f\u4e0d\u80fd\u4ee5 || \u6216 &amp;&amp; \u8fde\u63a5\uff0c\n\u8fd9\u4e2a\u7279\u6027\u6dfb\u52a0\u4e86\u652f\u6301\u3002Traits\nassociated_type_bounds\n\u8fd9\u662f\u4e00\u4e2a stable Rust \u51fd\u6570\uff1afn fizzbuzz() -&gt; impl Iterator&lt;Item = String&gt; {\n    (1..).map(|val| match (val % 3, val % 5) {\n        (0, 0) =&gt; &quot;FizzBuzz&quot;.to_string(),\n        (0, _) =&gt; &quot;Fizz&quot;.to_string(),\n        (_, 0) =&gt; &quot;Buzz&quot;.to_string(),\n        (_, _) =&gt; val.to_string(),\n    })\n}\n\n\u6709\u4e86 associated_type_bounds \u7279\u6027\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u533f\u540d\u7c7b\u578b\uff1afn fizzbuzz() -&gt; impl Iterator&lt;Item: Display&gt; { ... }\n\n\u770b\u770b\u8fd9\u4e2a\u5197\u957f\u91cd\u590d\u7684\u51fd\u6570\u7b7e\u540d\uff1afn flatten_twice&lt;T&gt;(iter: T) -&gt; Flatten&lt;Flatten&lt;T&gt;&gt;\nwhere\n    T: Iterator,\n    &lt;T as Iterator&gt;::Item: IntoIterator,\n    &lt;&lt;T as Iterator&gt;::Item as IntoIterator&gt;::Item: IntoIterator,\n{\n    iter.flatten().flatten()\n}\n\n\u6709\u4e86\u8fd9\u4e2a\u7279\u6027\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7b80\u5355\u5730\u5199\u6210\uff1afn flatten_twice&lt;T&gt;(iter: T) -&gt; Flatten&lt;Flatten&lt;T&gt;&gt;\nwhere\n    T: Iterator&lt;Item: IntoIterator&lt;Item: IntoIterator&gt;&gt;,\n{\n    iter.flatten().flatten()\n}\n\n\u8fd9\u79cd\u5199\u6cd5\u5bb9\u6613\u7406\u89e3\u8bb8\u591a\u3002default_type_parameter_fallback, associated_type_defaults\u4ee5\u53caconst_generics_defaults\n\nconst_generics_defaults \u4e8e Rust 1.59 \u7a33\u5b9a\u3002\n\u8fd9\u4e9b\u7279\u6027\u5141\u8bb8\u4f60\u4e3a \u6cdb\u578b\u7c7b\u578b, \u5173\u8054\u7c7b\u578b \u4ee5\u53ca const \u53d8\u91cf \u5728\u66f4\u591a\u5730\u65b9\u6307\u5b9a\u9ed8\u8ba4\u503c\u3002\u5b83\u4eec\u5141\u8bb8\u4f60\u4f5c\u4e3a\u5f00\u53d1\u8005\u521b\u5efa\u66f4\u597d\u7684 API \u3002\n\u5982\u679c\u4e00\u4e2acrate\u7684\u7528\u6237\u5bf9\u7ec6\u8282\u4e0d\u611f\u5174\u8da3\uff0c\u800c\u5b83\u6709\u9ed8\u8ba4\u503c\uff0c\u5219\u53ef\u4ee5\u5ffd\u7565\u7ec6\u8282\u3002\n\u8fd9\u4e5f\u8ba9\u62d3\u5c55 API \u53d8\u5f97\u5bb9\u6613\uff0c\u65e0\u9700\u505a\u51fa\u7834\u574f\u6027\u66f4\u65b0\u3002negative_impls \u548c auto_traits\n\u8fd9\u4e9b\u7279\u6027\u90fd\u88ab\u6807\u51c6\u5e93\u4f7f\u7528\u3002Send \u548c Sync \u90fd\u662f\u81ea\u52a8 trait\u3002Send trait \u5b9a\u4e49\u4e8e\u6807\u51c6\u5e93\uff1apub unsafe auto trait Send {\n    // \u7a7a\u7684\n}\n\n\u6ce8\u610fauto\u5173\u952e\u5b57\uff0c\u5b83\u8ba9\u7f16\u8bd1\u5668\u4e3a\u4efb\u610f\u7ed3\u6784\u4f53/\u679a\u4e3e\u4f53/\u8054\u5408\u4f53\u81ea\u52a8\u5b9e\u73b0 Send trait\uff0c\uff08\u524d\u63d0\u662f\u6784\u6210\u8fd9\u4e2a\u7c7b\u578b\u7684\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86Send\uff09\u5982\u679c\u6bcf\u4e2a\u7c7b\u578b\u90fd\u80fd\u7b80\u5355\u5730\u5b9e\u73b0\u81ea\u52a8trait \uff0c\u5b83\u4eec\u4e5f\u4e0d\u4f1a\u90a3\u4e48\u6709\u7528\u3002\n\u8fd9\u6b63\u662f\u5f15\u5165 negative_impls \u7684\u539f\u56e0\u3002negative_impls \u5141\u8bb8\u4e00\u4e2a\u7c7b\u578b\u4e0d\u5b9e\u73b0\u67d0\u4e2aauto trait\u3002\n\u4e3e\u4e2a\u4f8b\u5b50\uff0cUnsafeCell\u3002\u4e0d\u53d7\u9650\u5236\u7684 UnsafeCell \u5728\u7ebf\u7a0b\u95f4\u5171\u4eab\u975e\u5e38\u4e0d\u5b89\u5168\uff0c\u56e0\u6b64\u5b83\u88ab\u6807\u8bb0\u4e3a Sync \u4e5f\u4e0d\u5b89\u5168\u3002impl&lt;T: ?Sized&gt; !Sync for UnsafeCell&lt;T&gt; {}\n\n\u6ce8\u610f ! \uff0c\u8868\u793a \u201c\u4e0dSync\u201d\u3002marker_trait_attr\n\u8fd9\u4e2a\u7279\u6027\u4e3a trait \u6dfb\u52a0\u4e86#[marker] \u5c5e\u6027\u3002\n\u8be6\u89c1 Unstable Book\nRust \u4e0d\u5141\u8bb8\u5b9a\u4e49trait\u7684\u5b9e\u73b0\u65f6\u8986\u76d6\u6b64\u524d\u7684\u5b9e\u73b0\u3002\n\u8fd9\u6837\u7f16\u8bd1\u5668\u5c31\u80fd\u786e\u5b9a\u8981\u4f7f\u7528\u54ea\u4e2a\u5b9e\u73b0\u2014\u2014\u53ea\u6709\u4e00\u4e2a\u3002\u6807\u5fd7\u4e3a #[marker] \u7684 trait \u4e0d\u80fd\u5728\u5b9e\u73b0\u4e2d\u8986\u76d6\u4efb\u4f55\u4e1c\u897f\u3002\n\u8fd9\u6837\u5b83\u4eec\u5c31\u80fd\u5141\u8bb8\u91cd\u53e0\u7684\u5b9e\u73b0\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u5b9e\u73b0\u90fd\u662f\u4e00\u6837\u7684\u3002type_alias_impl_trait, impl_trait_in_bindings and trait_alias\nimpl Trait \u8ba9\u7f16\u8bd1\u5668\u63a8\u5bfc\u5177\u4f53\u7c7b\u578b\uff0c\u628a\u5b83\u6362\u6210\u5b9e\u73b0\u4e86Trait\u7684\u7c7b\u578b\u3002\n\u76ee\u524d\uff0cimpl Trait\u53ea\u80fd\u5728\u51fd\u6570\u53c2\u6570\u6216\u8fd4\u56de\u7c7b\u578b\u4e2d\u4f7f\u7528\uff0c\u65e0\u6cd5\u5e94\u7528\u4e8e\u53d8\u91cf\u7ed1\u5b9a\u3002\n\u6ce8\uff1aimpl_trait_in_binding \u4e34\u65f6\u88ab\u79fb\u9664(2022-07-26)\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u5b83\u5bfc\u81f4\u4e86\u7834\u574f\u6027\u66f4\u65b0\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f7f\u7528 type_alias_impl_trait \u65f6\uff0c\u7c7b\u578b\u5fc5\u987b\u662f\u56fa\u5b9a\u7684\u3002\u7f16\u8bd1\u5668\u4f1a\u63a8\u65ad\u4e14\u5e94\u7528\u5355\u4e00\u5177\u4f53\u7684\u7c7b\u578b\u3002#![feature(type_alias_impl_trait)]\n\ntype Foo = impl AsRef&lt;str&gt;;\n\nfn foo(_: Foo) {}\n\nfn main() {\n    foo(String::new());\n    foo(&quot;&quot;);\n}\n\n\nerror[E0308]: mismatched types\n --&gt; src/main.rs:9:9\n  |\n3 | type Foo = impl AsRef&lt;str&gt;;\n  |            --------------- the expected opaque type\n...\n9 |     foo(&quot;&quot;);\n  |     --- ^^ expected opaque type, found `&amp;str`\n  |     |\n  |     arguments to this function are incorrect\n  |\n  = note: expected opaque type `Foo`\n               found reference `&amp;'static str`\nnote: function defined here\n --&gt; src/main.rs:5:4\n  |\n5 | fn foo(_: Foo) {}\n  |    ^^^ ------\n\nfn_traits and unboxed_closures\nFn\uff0cFnMut\u548cFnOnce\u88ab\u8ba4\u4e3a\u662ffn\u7684trait\u3002\n\u5b83\u4eec\u4f1a\u88ab\u4efb\u4f55\u51fd\u6570\u6216\u8005\u4f60\u521b\u5efa\u7684\u95ed\u5305\u81ea\u52a8\u5b9e\u73b0\uff0c\u5b83\u4eec\u5141\u8bb8\u4f60\u7ed9\u5b83\u4eec\u4f20\u53c2\u3002\u76ee\u524d\u5b83\u4eec\u53ea\u80fd\u88ab\u81ea\u52a8\u5b9e\u73b0\u3002\nfn_trait \u5219\u5141\u8bb8\u4e3a\u4efb\u610f\u7c7b\u578b\u63d0\u4f9b\u81ea\u5b9a\u4e49\u5b9e\u73b0\u3002\n\u8fd9\u5c31\u50cf\u662f\u64cd\u4f5c\u7b26\u91cd\u8f7d\uff0c\u4f46\u8981\u81ea\u5b9a\u4e49\u7684\u662f()\u8c03\u7528\u3002#![feature(unboxed_closures)] // \u5b9e\u73b0\u5e26\u6709`extern &quot;rust-call&quot;`\u7684\u51fd\u6570\n#![feature(fn_traits)]\n\nstruct Multiply;\n\n#[allow(non_upper_case_globals)]\nconst multiply: Multiply = Multiply;\n\nimpl FnOnce&lt;(u32, u32)&gt; for Multiply {\n    type Output = u32;\n    extern &quot;rust-call&quot; fn call_once(self, a: (u32, u32)) -&gt; Self::Output {\n        a.0 * a.1\n    }\n}\n\nimpl FnOnce&lt;(u32, u32, u32)&gt; for Multiply {\n    type Output = u32;\n    extern &quot;rust-call&quot; fn call_once(self, a: (u32, u32, u32)) -&gt; Self::Output {\n        a.0 * a.1 * a.2\n    }\n}\n\nimpl FnOnce&lt;(&amp;str, usize)&gt; for Multiply {\n    type Output = String;\n    extern &quot;rust-call&quot; fn call_once(self, a: (&amp;str, usize)) -&gt; Self::Output {\n        a.0.repeat(a.1)\n    }\n}\n\nfn main() {\n    assert_eq!(multiply(2, 3), 6);\n    assert_eq!(multiply(2, 3, 4), 24);\n    assert_eq!(multiply(&quot;hello &quot;, 3), &quot;hello hello hello &quot;);\n}\n\n\u8fd9\u53ef\u88ab\u7528\u4e8e\u5b9e\u73b0\u6709\u70b9 hacky \u7684\u51fd\u6570\u91cd\u8f7d\u548c\u4e0d\u5b9a\u53c2\u51fd\u6570.\u8bed\u6cd5\u7cd6\nbox_patterns and box_syntax\n\u8fd9\u4e24\u4e2a\u7279\u6027\u8ba9Box\u7684\u6784\u9020\u548c\u6790\u6784\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\nbox\u5173\u952e\u5b57\u5c06\u53d6\u4ee3Box::new(...)\uff0c\u5e76\u4e14\u5141\u8bb8\u5728\u6a21\u5f0f\u5339\u914d\u4e2d\u89e3\u5f15\u7528Box\u3002struct TrashStack&lt;T&gt; {\n    head: T,\n    body: Option&lt;Box&lt;TrashStack&lt;T&gt;&gt;&gt;,\n}\n\nimpl&lt;T&gt; TrashStack&lt;T&gt; {\n    pub fn push(self, elem: T) -&gt; Self {\n        Self {\n            head: elem,\n            body: Some(box self),\n        }\n    }\n\n    pub fn peek(self) -&gt; Option&lt;T&gt; {\n        if let TrashStack {\n            body: Some(box TrashStack { head, .. }),\n            ..\n        } = self\n        {\n            Some(head)\n        } else {\n            None\n        }\n    }\n}\n\n\n\u6b63\u5982\u539f\u6587\u4f5c\u8005\u6240\u8bf4\uff0crust\uff08\u5305\u62ec\u5185\u90e8\u5b9e\u73b0\uff09\u6b63\u5728\u51cf\u5c11box syntax\u7684\u4f7f\u7528\u3002\u6240\u4ee5\u8fd9\u4e2a\u7ae0\u8282\u5495\u4e86\uff08\u7406\u76f4\u6c14\u58ee\uff09\nThis makes things a little more ergonomic but I don't think there is much chance that this feature will ever be stabilised.\nIt seems to have existed forever with no plan for stabilisation but instead a little discussion about removing the feature.\nbox_synatx is used heavily in the compiler's source and a little in the standard library.It is interesting to note that box does not desugar to Box::new but Box::new is implemented in the standard library with box.impl&lt;T&gt; Box&lt;T&gt; {\n    ...\n    pub fn new(x: T) -&gt; Self {\n        box x\n    }\n    ...\n}\n\nasync_closure\n\u76ee\u524d\u5728\u95ed\u5305\u4e2d\u4f7f\u7528\u5f02\u6b65\u4ee3\u7801\u4f60\u9700\u8981\u52a0async\u5757\u3002app.at(&quot;/&quot;).get(|_| async { Ok(&quot;Hi&quot;) });\n\nasync_closure \u5141\u8bb8\u4f60\u5c06\u95ed\u5305\u672c\u8eab\u6807\u8bb0\u4e3a\u5f02\u6b65\u7684\uff0c\u50cf\u5f02\u6b65\u51fd\u6570\u90a3\u6837\u5199app.at(&quot;/&quot;).get(async |_| Ok(&quot;Hi&quot;));\n\nin_band_lifetimes\n\n\u4e8e Rust #93845 \u79fb\u9664\uff1b\u539f\u59cb RFC \u4e2d\uff0c\u4e0d\u5355\u72ec\u6807\u6ce8\u7684\u63d0\u6848\u88ab Rust \u62d2\u7edd\u3002\u8be6\u89c1 Rust #44524 \u3002\n\u4f7f\u7528\u751f\u547d\u5468\u671f\u6807\u8bb0\u65f6\uff0c\u5fc5\u987b\u4e8b\u5148\u5b9a\u4e49\uff1afn select&lt;&#39;data&gt;(data: &amp;&#39;data Data, params: &amp;Params) -&gt; &amp;&#39;data Item;\n\n\u4f7f\u7528 in_band_lifetimes \uff0c\u751f\u547d\u5468\u671f\u53ef\u4ee5\u4e0d\u5148\u663e\u5f0f\u5b9a\u4e49\u3002fn select(data: &amp;&#39;data Data, params: &amp;Params) -&gt; &amp;&#39;data Item;\n\n\u8fd9\u662f\u751f\u547d\u5468\u671f\u5728rust 1.0.0\u524d\u7684\u5199\u6cd5\u3002format_args_capture\n\n\u4e8e Rust 1.58 \u7a33\u5b9a\u3002\nThis allows for named arguments to be placed inside of strings inside any macro that depends on std::format_args!.\nThat includes print!, format!, write! and many more.let name = &quot;Ferris&quot;;\nlet age = 11;\nprintln!(&quot;\u4f60\u597d{name}\uff0c\u4f60{age}\u5c81\u4e86\u3002&quot;);\n\ncrate_visibility_modifier\n\n\u5df2\u4e8e Rust #97254 \u79fb\u9664\u3002\u7406\u7531\uff1apub struct Foo(crate ::std::path::Path);\n\n\u4f1a\u4ea7\u751f\u6b67\u4e49 1\n\u8fd9\u4e2a\u7279\u6027\u5141\u8bb8\u4f60\u5199 crate struct Foo \u800c\u4e0d\u662f pub(crate) struct Foo \uff0c\u8bed\u4e49\u4e0d\u53d8\u3002Types\ntype_ascription\n\n\u5df2\u4e8e Rust #101728 \u79fb\u9664\u7406\u7531\uff1a\u8bed\u6cd5\u4e0dRust\n\u7528Iterator\u7684collect\u65b9\u6cd5\u4e3e\u4e2a\u4f8b\u5b50\uff1a\ncollect\u5c06\u8fed\u4ee3\u5668\u8f6c\u6362\u5230\u96c6\u5408let word = &quot;hello&quot;.chars().collect();\nprintln!(&quot;{:?}&quot;, word);\n\n\u8fd9\u4e2a\u4e0d\u80fd\u7f16\u8bd1\uff0c\u56e0\u4e3arust\u65e0\u6cd5\u63a8\u5bfc\u51faword\u7684\u7c7b\u578b\u3002\n\u53ef\u4ee5\u628a\u7b2c\u4e00\u884c\u6362\u6210\uff1alet word: Vec&lt;char&gt; = &quot;hello&quot;.chars().collect();\n\n\u6709\u4e86type_ascription\u5c31\u4e0d\u9700\u8981\u518d\u52a0\u4e0alet\u7ed1\u5b9a\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\uff1aprintln!(&quot;{:?}&quot;, &quot;hello&quot;.chars().collect(): Vec&lt;char&gt;);\n\n: Type \u8bed\u6cd5\u53ef\u4ee5\u7528\u5728\u4efb\u4f55\u4e00\u5904\uff0c\u63d0\u9192\u7f16\u8bd1\u5668\u201c\u6211\u5728\u8fd9\u91cc\u60f3\u8981\u5f97\u5230\u8fd9\u4e2a\u7c7b\u578b\u201dnever_type\n\u4f60\u53ef\u4ee5\u5b9a\u4e49\u6ca1\u6709\u53d8\u4f53\u7684\u679a\u4e3e\u4f53\uff0c\n\u8fd9\u79cd\u679a\u4e3e\u4f53\u4e5f\u5b58\u5728\u4e8e\u6807\u51c6\u5e93\u4e2d\u3002pub enum Infallible {}\n\n\u4f60\u53ef\u4ee5\u5728\u6cdb\u578b\u6216\u51fd\u6570\u7b7e\u540d\u4e2d\u4f7f\u7528\u8be5\u7c7b\u578b\uff0c\u4f46\u5b83\u4e0d\u53ef\u80fd\u88ab\u6784\u9020\u3002\u5143\u7c7b\u578b () \u7b49\u4ef7\u4e8e\u53ea\u6709\u4e00\u4e2a\u53d8\u4f53\u7684\u679a\u4e3e\u3002\nnever_type \u5f15\u5165\u4e86\u4e00\u79cd\u65b0\u7684\u7c7b\u578b\uff0c!\u7b49\u4ef7\u4e8e\u6ca1\u6709\u53d8\u4f53\u7684 Infallible\u3002Because ! can never be constructed it can be given special powers.\nWe don't have to handle the case of ! because we have proven it will never exist.fn main() -&gt; ! {\n    loop {\n        println!(&quot;Hello, world!&quot;);\n    }\n}\n\nLoops without a break &quot;return !&quot; because they don't ever return.! can be very useful for expressing impossible outcomes in the type system.\nTake for example the FromStr implementation on this UserName type.\nThis implementation is infallible because its implementation can never fail.\nThis allows us to set the Err variant to type !.struct UserName(String);\n\nimpl FromStr for UserName {\n    type Err = !;\n    fn from_str(s: &amp;str) -&gt; Result&lt;Self, Self::Err&gt; {\n        Ok(Self(s.to_owned()))\n    }\n}\n\nIt is then possible to use an empty match on the Err variant because ! has no variants.let user_name = match UserName::from_str(&quot;ethan&quot;) {\n    Ok(u) =&gt; u,\n    Err(e) =&gt; match e {},\n};\n\nexhaustive_patterns\n\n\u8bd1\u6ce8\uff1a\u539f\u4f5c\u8005\u7684\u89e3\u91ca\u548c RFC\uff0cIssue \u90fd\u5bf9\u4e0d\u4e0a\u3002\u539fIssue\u76ee\u6807\u4e3a\uff0c\u4e0d\u53ef\u8fbe\u7684\u5206\u652f\u53ef\u4ee5\u7701\u7565\u5982\u6790\u6784\u4e00\u4e2a Result&lt;T, !&gt; \uff0cfn safe_unwrap&lt;T&gt;(x: Result&lt;T, !&gt;) -&gt; T {\n    match x {\n        Ok(y) =&gt; y,\n    }\n}\n\n\nWith the feature exhaustive_patterns the type system becomes smart enough for us to eliminate the Err branch altogether.let user_name = match UserName::from_str(&quot;ethan&quot;) {\n    Ok(u) =&gt; u,\n};\n\nWe can combine this with destructuring to remove the match leaving a beautiful line of code.let Ok(user_name) = UserName::from_str(&quot;ethan&quot;);\n\nattribute\n\n\u8fd9\u4e2a\u5c0f\u8282\u7531 @Hinanawi_Tenshi_M \u63d0\u4f9b\u7ffb\u8bd1\uff0c\u6709\u6539\u52a8\noptimize_attribute\n\u4f60\u53ef\u4ee5\u7528 Cargo.toml \u7684 opt-level \u9009\u9879\u6307\u5b9a\u4f60\u60f3\u8981\u600e\u4e48\u4f18\u5316\u4f60\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002opt-level \u6307\u5b9a\u7684\u662f\u6574\u4e2a crate \u7684\u4f18\u5316\u65b9\u5f0f\uff0c\u5982\u679c\u4f60\u60f3\u8981\u5206\u522b\u63a7\u5236\u6bcf\u4e00\u4e2a\u9879\u76ee\u7684\u4f18\u5316\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 optimize_attribute \u9009\u9879\u3002#[optimize(speed)]\nfn fast_but_large() {\n     ...\n}\n\n#[optimize(size)]\nfn slow_but_small() {\n     ...\n}\n\n\u8fd9\u5bf9\u5fae\u8c03\u5e94\u7528\u7a0b\u5e8f\u975e\u5e38\u6709\u7528\u3002\u5728\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u5927\u5c0f\u548c\u6027\u80fd\u7684\u6743\u8861\u7279\u522b\u91cd\u8981\u3002\u4f8b\u5982\u4f7f\u7528 web assembly \u65f6\u3002stmt_expr_attributes\n\u8fd9\u4e2a\u7279\u6027\u8ba9\u4f60\u53ef\u4ee5\u5728\u51e0\u4e4e\u4efb\u4f55\u5730\u65b9\u6807\u8bb0\u5c5e\u6027\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u9876\u5c42\u9879\u76ee\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u95ed\u5305\u4e0a\u653e\u4e00\u4e2aoptimize attributecfg_version\n\u8be5\u7279\u6027\u5141\u8bb8\u6839\u636e\u7f16\u8bd1\u5668\u7248\u672c\u8fdb\u884c\u6761\u4ef6\u7f16\u8bd1\u3002#[cfg(version(&quot;1.42&quot;))] // 1.42 \u4ee5\u4e0a\nfn a() {\n    // ...\n}\n\n#[cfg(not(version(&quot;1.42&quot;)))] // 1.41 \u4ee5\u4e0b\nfn a() {\n    // ...\n}\n\n\u8fd9\u4f7f\u5f97\u4f60\u7684 crate \u80fd\u591f\u4f7f\u7528\u6700\u65b0\u7684\u7f16\u8bd1\u5668\u529f\u80fd\uff0c\u540c\u65f6\u4ecd\u7136\u4fdd\u6301\u5bf9\u65e7\u7f16\u8bd1\u5668\u7684\u540e\u5907\u652f\u6301\u3002no_core\n\u4e0d\u4f9d\u8d56 ::std \u7684 #![no_std] \u9009\u9879\u5df2\u7ecf\u5b58\u5728\u5f88\u4e45\u4e86\uff0c#![no_core] \u5219\u5bf9\u5e94\u7740\u4e0d\u4f9d\u8d56 ::core \u3002\u8fd9\u5bf9\u4e8e\u4e0d\u5728\u5b8c\u6574\u73af\u5883\u4e2d\u8fd0\u884c\u7684\u5e94\u7528\u975e\u5e38\u91cd\u8981\uff0c\u5982\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3002\n\u5d4c\u5165\u5f0f\u7cfb\u7edf\u901a\u5e38\u6ca1\u6709\u64cd\u4f5c\u7cfb\u7edf\uff0c\u751a\u81f3\u6ca1\u6709\u52a8\u6001\u5185\u5b58\uff0c\u6240\u4ee5 std \u4e2d\u7684\u8bb8\u591a\u529f\u80fd\u90fd\u65e0\u6cd5\u4f7f\u7528\u3002\u4f60\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7 #![no_core] \u8868\u660e\u4e0d\u4f7f\u7528 libcore\u3002\u8fd9\u6837\u4e0d\u4f1a\u7559\u4e0b\u4efb\u4f55\u4e1c\u897f\u2014\u2014\u4f60\u751a\u81f3\u4e0d\u80fd\u4f7f\u7528libc\u3002\u5176\u5b83\nConst \u6cdb\u578b\n\n\u8fd9\u4e2a\u5c0f\u8282\u7531 @Hinanawi_Tenshi_M \u63d0\u4f9b\u7ffb\u8bd1\uff0c\u6709\u6539\u52a8\u3002\u5df2\u7ecf\u5728 Stable Rust \u90e8\u5206\u5b9e\u73b0\u3002 2\n\u5728\u90fd\u67cf\u6797 Rust \u96c6\u4f1a\u4e2d\uff0c\u5173\u4e8e const_generics \uff0c\u6211\u505a\u8fc7\u4e00\u573a\u6f14\u8bb2\u3002\n\u4e0e\u5176\u91cd\u590d\u90a3\u4e9b\u5185\u5bb9\uff0c\u6211\u66f4\u63a8\u8350\u5927\u5bb6\u53bb\u770b\u8fd9\u4e2a\u6f14\u8bb2\u3002Macros 2.0\nRust\u7684\u58f0\u660e\u5f0f\u5b8f\u975e\u5e38\u5f3a\u5927\u3002\u7136\u800c\uff0c macro_rules! \u7684\u4e00\u4e9b\u89c4\u5219\uff0c\u8ba9\u6211\u5f88\u56f0\u60d1\u3002macro_rules! \u662f\u4e00\u4e2a\u7b80\u5355\u7684token\u8f6c\u6362\u8fc7\u7a0b\uff0c\u6216\u8005\u8bf4\uff0c\n\u5b83\u63a5\u53d7\u4e00\u4e2atoken\u5217\u8868\uff0c\u8f93\u51fa\u65b0\u7684token\u5217\u8868\n\u53ef\u89c1\u6027\u539f\u5219\u4f1a\u9075\u4ece\u5b8f\u7684\u8c03\u7528\u5904\u7684\u89c4\u5219\u3002\n\n\u2014\u2014\u56e0\u4e3a\u4ee3\u7801\u53ea\u662f\u88ab\u7b80\u5355\u5730\u7c98\u8d34\u56de\u539f\u5904\u3002Macros 2.0 \u4ecb\u7ecd\u4e86macro_rules!\u7684\u4e00\u79cd\u66ff\u4ee3\u3002\u7f16\u5199 Macros 2.0 \u53ea\u9700\u4f7f\u7528\u5173\u952e\u5b57 macro\u5b83\u5f15\u5165\u4e86\u4e00\u79cd\u65b0\u7684\u683c\u5f0f\uff0cHygiene \u3002Hygiene \u5141\u8bb8\u5b8f\u5e94\u7528\u5b83\u4eec\u5b9a\u4e49\u5904\u7684\u53ef\u89c1\u6027\u89c4\u5219\uff0c\u800c\u4e0d\u662f\u8c03\u7528\u5904\u3002generators\n\u751f\u6210\u5668\uff08\u534f\u7a0b\uff09\u63d0\u4f9b\u4e86\u4e00\u79cd\u7279\u6b8a\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u6682\u505c\uff0c\u201cyield\u201d \u4e2d\u95f4\u503c\u7ed9\u8c03\u7528\u8005\u3002\u751f\u6210\u5668\u5141\u8bb8\u4f60\u4f7f\u7528yield\u5173\u952e\u5b57\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u6bcf\u6b21\u6682\u505c\u8be5\u51fd\u6570\u5e76\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002\u751f\u6210\u5668\u4e2d\u4e5f\u53ef\u4ee5return\u5355\u4e2a\u503c\uff0c\u4e0d\u53ef\u518d\u6062\u590d\u3002\u5927\u7ea6\u4e09\u5e74\u524d\uff0c\u6211\u5c1d\u8bd5\u7f16\u5199\u7b97\u6cd5\uff0c\u6cbf\u5bf9\u89d2\u7ebf\u904d\u5386\u4e00\u4e2a\u65e0\u7a77\u7684\u77e9\u9635\u3002\u6211\u53d1\u73b0\u7528Rust\u7684\u8fed\u4ee3\u5668\u7f16\u5199\u5b83\u975e\u5e38\u56f0\u96be\uff0c\u6700\u7ec8\u653e\u5f03\u4e86\u3002\u8fd9\u662f\u6211\u7684\u5b9e\u73b0\uff0c\u4f7f\u7528\u4e86Rust\u7684\u751f\u6210\u5668\uff08\u534f\u7a0b\uff09\u548c\u4e00\u4e9b\u6211\u4eec\u521a\u521a\u8ba8\u8bba\u8fc7\u7684\u7279\u6027\u3002#![feature(\n    try_blocks,\n    generators,\n    generator_trait,\n    associated_type_bounds,\n    type_ascription\n)]\n\nuse std::{\n    iter,\n    ops::{Generator, GeneratorState},\n    pin::Pin,\n};\n\n/// Input\n/// [[1, 2, 3]\n/// ,[4, 5, 6]\n/// ,[7, 8, 9]]\n/// Output\n/// [1, 2, 4, 3, 5, 7]\nfn diagonalize&lt;T&gt;(\n    mut matrix: impl Iterator&lt;Item: Iterator&lt;Item = T&gt;&gt;,\n) -&gt; impl Generator&lt;Yield = T, Return = ()&gt; {\n    move || {\n        let mut rows = Vec::new();\n        (try {\n            rows.push(matrix.next()?);\n            for height in 0.. {\n                for row in 0..height {\n                    if row &gt;= rows.len() {\n                        rows.push(matrix.next()?);\n                    }\n                    yield rows[row].next()?;\n                }\n            }\n        }): Option&lt;()&gt;;\n    }\n}\n\nfn main() {\n    let matrix = (0..).map(|x| iter::once(x).cycle().enumerate());\n    let mut diagonals = diagonalize(matrix);\n    while let GeneratorState::Yielded(value) = Pin::new(&amp;mut diagonals).resume(()) {\n        dbg!(value);\n    }\n}\n\n\nIt is understandable if you found the above snippet hard to interpret.\nIt makes use of a number of features that you may have just been introduced to.There is a compelling argument against adding too many new features as they can greatly increase the learning curve.\n\u751f\u6210\u5668\u8ba9\u4e00\u4e9b\u6ca1\u6709\u8fd9\u4e2a\u7279\u6027\u4f1a\u96be\u4ee5\u7f16\u5199\u751a\u81f3\u65e0\u6cd5\u7f16\u5199\u7684\u5b9e\u73b0\u53d8\u4e3a\u53ef\u80fd\u3002\u751f\u6210\u5668\u5728\u6807\u51c6\u5e93\u4e2d\u662f\u4e3a\u4e86\u5b9e\u73b0 async/await \u6dfb\u52a0\u7684\u3002\n\u5177\u4f53\u7684\u8bed\u4e49\u5728\u7a33\u5b9a\u5316\u524d\u5f88\u53ef\u80fd\u88ab\u4fee\u6539\uff0c\u4f46\u5b83\u5f88\u6709\u8da3\u3002\u603b\u7ed3\n\u6211\u5f88\u62b1\u6b49\uff0c\u6ca1\u6709\u4ecb\u7ecd\u5176\u4ed6\u4e09\u4e2a\u4e0d\u9519\u7684unstable\u7279\u6027\uff1aGAT, \u5185\u8054\u6c47\u7f16\u548c\u7279\u5316\u3002\n\u6211\u53ea\u662f\u611f\u89c9\uff0c\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u505a\u4e0d\u5230\u5ba2\u89c2\u7684\u8bc4\u4ef7\u5b83\u4eec\uff0c\u4e0d\u8fc7\u5c06\u6765\u6211\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u3002\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591aunstable\u7279\u6027\uff0c\u6211\u63a8\u8350\u4f60\u770bthe unstable book\uff0c\u8fd9\u91cc\u4f1a\u5217\u51fa\u7edd\u5927\u90e8\u5206\u3002\nUnstable book\u4f1a\u8fde\u63a5\u5230tracking issue\uff0c\u800c\u540e\u8005\u5f80\u5f80\u4f1a\u94fe\u63a5\u5230RFC\u3002\n\u7ec4\u5408\u4f7f\u7528\u8fd9\u4e9b\u6765\u6e90\uff0c\u4f60\u53ef\u4ee5\u5f88\u597d\u5730\u4e86\u89e3\u65b0\u7279\u6027\u3002Thank you for reading my first blog post \ud83d\ude03.\nThe best way to support me is by following my Twitter.\nI am also looking for employment opportunities so please get in touch if you would like to talk about that.\n\nhttps://github.com/rust-lang/rust/issues/53120#issuecomment-1124065083&#8617;\nhttps://github.com/rust-lang/rust/issues/44580#issuecomment-1074040208&#8617;\n\n\n", "categories": [{"name": "Programming", "slug": "Programming", "permalink": "/category/Programming/"}], "tags": [{"name": "Rust", "slug": "Rust", "permalink": "/tag/Rust/"}, {"name": "Language_feature", "slug": "Language_feature", "permalink": "/tag/Language_feature/"}]}, {"title": "Osdlyrics \u7f51\u6613\u6765\u6e90\u542f\u7528\u7ffb\u8bd1", "date": "2021-07-25T17:45:00+08.00", "path": "/archives/enable-osdlyrics-netease-translation/", "text": "\u5f15\u8a00\n\u73b0\u5728\u5df2\u7ecf\u52a0\u8fdb\u4e0a\u6e38\u4e86\u3002", "categories": [{"name": "Linux", "slug": "Linux", "permalink": "/category/Linux/"}], "tags": [{"name": "Linux", "slug": "Linux", "permalink": "/tag/Linux/"}, {"name": "Lyrics", "slug": "Lyrics", "permalink": "/tag/Lyrics/"}]}, {"title": "OpenGL Flipping\u2014\u2014\u8bb0\u4e00\u6b21\u6e38\u620f\u76f4\u64ad\u95ea\u5c4f\u4fee\u590d\u8fc7\u7a0b", "date": "2021-07-20T01:03:00+08.00", "path": "/archives/opengl-flipping/", "text": "\u5f15\u8a00\n\u6b64\u524d\u6211\u5728 bilibili \u4e0a\u4f20 osu! \u7b49\u6e38\u620f\u89c6\u9891 \u53d1\u73b0\u6709\u95ea\u5c4f\u73b0\u8c61\u3002\u5f88\u4e45\u4ee5\u540e\u6211\u5230 OBS \u793e\u533a \u5bfb\u6c42\u5e2e\u52a9\uff0c\u7ec8\u4e8e\u5f97\u5230\u4e86\u89e3\u51b3\u65b9\u6848\u3002Flipping\nNVIDIA Flipping \u662f\u79cd\u53ef\u4ee5 \u7565\u5fae \u63d0\u9ad8\u5e27\u7387\u7684\u6280\u672f\uff0c\u5bf9\u4e8e\u5185\u5bb9\u521b\u4f5c\u8005\uff08\u5f55\u5236\u89c6\u9891\uff0c\u5168\u5c4f\u6a21\u5f0f\u7684\u8bdd\uff09\u5e94\u5f53\u7981\u7528\uff0c\u4e0d\u7136\u4f1a\u5f71\u54cd\u5f55\u5236\uff08\u8be6\u89c1\u5b98\u65b9\u6587\u6863\uff09\u7981\u7528\u4e4b\u540e\uff0c\u5782\u76f4\u540c\u6b65\u4f1a\u65e0\u6cd5\u4f7f\u7528\uff0c\u800c\u4e14\u4f1a\u6709 \u7565\u5fae \u6027\u80fd\u4e0b\u964d", "categories": [{"name": "Linux", "slug": "Linux", "permalink": "/category/Linux/"}], "tags": [{"name": "Linux", "slug": "Linux", "permalink": "/tag/Linux/"}, {"name": "Recording", "slug": "Recording", "permalink": "/tag/Recording/"}]}, {"title": "WinDirStat\u2014\u2014Windows\u4e0b\u5b58\u50a8\u5206\u6790\u7684\u4f18\u79c0\u65b9\u6848", "date": "2021-06-23T19:30:00+08.00", "path": "/archives/windirstat-recommend/", "text": "\u5f15\u8a00\n\u4e00\u4e2a\u6708\u524d\u6e05\u7406C\u76d8\uff0c\u7136\u540e\u5728 alternativeto.net \u627e\u5230\u4e86 FileLight \u5728 Windows \u4e0a\u7684\u66ff\u4ee3\u54c1\uff0c\u6700\u540e\u9009\u62e9\u4e86 WinDirStat \u3002\u76f8\u8f83\u4e8e TreeSize \u62bd\u8c61\u7684\u997c\u56fe\u548c\u76ee\u5bb3\u7684\u5927\u5c0f\u56fe\uff0cWinDirStat \u4f7f\u7528 \u989c\u8272 \uff08\u5bf9\u5e94\u6587\u4ef6\u7c7b\u578b\uff09\uff0c \u77e9\u5f62\u5927\u5c0f \uff08\u5bf9\u5e94\u6587\u4ef6\u5927\u5c0f\uff09\uff0c\u76f4\u89c2\u5730\u663e\u793a\u4e86\u7a7a\u95f4\u4f7f\u7528\u5206\u5e03\u3002\u9644\u4e00\u5f20\u622a\u56fe\uff1ascreencut", "categories": [{"name": "Win32", "slug": "Win32", "permalink": "/category/Win32/"}], "tags": [{"name": "Win32", "slug": "Win32", "permalink": "/tag/Win32/"}, {"name": "Storage_Analyse", "slug": "Storage_Analyse", "permalink": "/tag/Storage_Analyse/"}]}, {"title": "\u5728wine\u4e0b\u8fd0\u884cgalgame\u5e38\u89c1\u95ee\u9898\u89e3\u51b3\u65b9\u6848", "date": "2021-02-04T00:04:00+08.00", "path": "/archives/galgame-runs-on-linux/", "text": "\u8bf4\u660e\n\u54b1\u7684wine\u4e00\u76f4\u8ddf\u968farchlinux\u5b98\u65b9\u4ed3\u5e93\u6700\u65b0\u7248\u8fd9\u91cc\u5185\u5bb9\u53ef\u80fd\u5f88\u5c11\uff0c\u56e0\u4e3a\u54b1\u6bcf\u6b21wine\u63a8gal\u51fa\u9519\u5e76\u4e14\u89e3\u51b3\u4e86\u624d\u4f1a\u653e\u5230\u8fd9\u91cc\u8fd9\u91cc\u662f\u6b63\u6587\n\u54b1\u5728linux\u4e0b\u63a8gal\u6709\u65f6OP\u4ec0\u4e48\u7684\u7ecf\u5e38\u51fa\u9519\u2026\u2026\u4e8e\u662f\u51c6\u5907\u6574\u7406\u8fd9\u4e2a\u535a\u6587\uff0c\u200b\u6536\u5f55\u5404\u79cd\u9519\u8bef\u4fe1\u606f\u89e3\u51b3\u65b9\u6848\u3002\u901a\u7528\n\nMPEG splitter faild: \u5b89\u88c5 devenum, quartz \u540e\u89e3\u51b3\uff1bquartz\u51fa\u95ee\u9898\u7684\u8bdd\u53ef\u4ee5\u6267\u884c winetricks --force quartz \u91cd\u88c5\u3002\n\u4e07\u80fd\u65b9\u6cd5\uff1a \u5728\u5d29\u6e83\u7684\u5730\u65b9\u5b58\u6863\uff0c\u6362win7\u865a\u62df\u673a\u8d70\u8fc7\u90a3\u6bb5\u5185\u5bb9\u540e\u5b58\u6863\u3002\n\u5176\u4ed6OP\u64ad\u653e\u5d29\u6e83\uff1afaudio\uff08\u95ea\u753b\u9762\u65e0\u58f0\u97f3\uff09\uff0c\u7b49\u7b49\u2026\u2026\uff08\u5f85\u6dfb\u52a0\uff09\n\u6253\u4e0d\u5f00\u6e38\u620f: \u4e00\u822c\u5b89\u88c5DirectX\u76f8\u5173\u4f9d\u8d56\u9879\u5373\u53ef\u89e3\u51b3\uff0c\u8fdb\u4e0d\u53bb\u4e5f\u53ef\u4ee5\u8bd5\u8bd5WINED3D=1\u524d\u7f00\n\u542f\u52a8\u65f6\u5f39\u4e86\u4e71\u7801\u62a5\u9519\uff0c\u6216\u8005\u662f\u6e38\u620f\u4e2d\u4e71\u7801\uff08\u6bd4\u5982 Clover Day\u2019s\u4e2d\u6587\u6c49\u5316\u7248\uff0crewrite\uff09\uff0c\u53ef\u4ee5\u5728wine\u524d\u52a0\u542f\u52a8\u53c2\u6570LANG=en_US.UTF-8\uff0c\u6216LANG=zh_CN.UTF-8\u6216LANG=ja_JP.UTF-8\u3002\nWineHQ-AppDB \u901a\u5e38\u4f1a\u6709\u4e00\u4e9b\u4eba\u63d0\u4f9b\u4fe1\u606f\u3002\n\n\u7279\u5b9a\u6e38\u620f\n\u62d4\u4f5c\u5c9b\n\u62d4\u4f5c\u5c9b\u4f7f\u7528\u7f16\u7801 GB18030\u542f\u52a8\u65f6\u4f7f\u7528 LANG=zh_CN.GB18030 wine ... \u5373\u53ef\u89e3\u51b3\u4e71\u7801\u591a\u5a1c\u591a\u5a1c\n\u6dfb\u52a0\u542f\u52a8\u53c2\u6570 WINED3D=1 \u5373\u53ef\u8fd0\u884c\u3002\u53c2\u8003\u94fe\u63a5\uff08\u9700\u8981\u4e8b\u5148\u8fdb\u884clocale-gen\uff09", "categories": [{"name": "Galgame", "slug": "Galgame", "permalink": "/category/Galgame/"}], "tags": [{"name": "Galgame", "slug": "Galgame", "permalink": "/tag/Galgame/"}, {"name": "Wine", "slug": "Wine", "permalink": "/tag/Wine/"}, {"name": "Linux", "slug": "Linux", "permalink": "/tag/Linux/"}]}, {"title": "Wallpaper Engine\u7684\u5f00\u6e90\u66ff\u4ee3\u54c1\uff1aScreenPlay", "date": "2020-10-01T01:04:00+08.00", "path": "/archives/ScreenPlay/", "text": "\u524d\u8a00\n\u6700\u8fd1\u7a81\u7136\u60f3\u627e\u5f00\u6e90\u7684linux\u4e0a\u7684WE\u66ff\u4ee3\u54c1\uff0c\u7136\u800c\u627e\u5230\u4e86 Windows10 \u4e0b\u8fd0\u884c\u7684\u7684 ScreenPlay \u3002\u8fd8\u662f\u633a\u597d\u7528\u7684\uff0c\u7ed9\u4ed6\u4eec\u8d21\u732e\u4e86zh-CN\u7684\u7ffb\u8bd1\u3002\u5b89\u88c5\n\u53ef\u4ee5\u5728Steam\u76f4\u63a5\u83b7\u53d6\u5b89\u88c5\u3002", "categories": [{"name": "Win32", "slug": "Win32", "permalink": "/category/Win32/"}], "tags": [{"name": "Win32", "slug": "Win32", "permalink": "/tag/Win32/"}, {"name": "Wallpaper", "slug": "Wallpaper", "permalink": "/tag/Wallpaper/"}]}, {"title": "\u7ed9Win32\u7a0b\u5e8f\u52a0\u56fe\u6807", "date": "2020-09-29T22:08:00+08.00", "path": "/archives/add-icon-to-win32-exe/", "text": "\u524d\u8a00\n\u4e3a\u4e86\u597d\u73a9\u54b1\u60f3\u8981\u8bd5\u7740\u7ed9win32\u7a0b\u5e8f\u52a0\u56fe\u6807\uff0c\u4f46\u662f\u53ea\u627e\u5230\u4e86\u7528VS\u52a0\u56fe\u6807\u7684\u64cd\u4f5c\u2026\u2026\u6700\u540e\u627e\u5230\u4e86\u94fe\u63a5\u64cd\u4f5c\u3002\u539f\u6587\u5730\u5740\uff08\u82f1\u6587\uff09\u5f00\u59cb\u52a8\u624b\u505a\n\u9996\u5148 \u6211\u4eec\u9700\u8981\u5199\u4e00\u4e2a .rc \u7684\u6587\u4ef6\uff1a1 ICON &quot;(path-to-*.ico)&quot;\n\n\u7136\u540e\uff0c\u8fd0\u884cwindres [file.rc] [file.o]\n\n\u6700\u540e\u628a .o \u94fe\u63a5\u8fdb\u53bb\uff01(\u8fd9\u91cc\u662fC\u7a0b\u5e8f)gcc main.c [file.o]\n\n\u5927\u529f\u544a\u6210\uff01", "categories": [{"name": "Win32", "slug": "Win32", "permalink": "/category/Win32/"}], "tags": [{"name": "Coding", "slug": "Coding", "permalink": "/tag/Coding/"}, {"name": "Development", "slug": "Development", "permalink": "/tag/Development/"}, {"name": "Win32", "slug": "Win32", "permalink": "/tag/Win32/"}]}], "pages": [{"title": "\u5173\u4e8e", "date": "2021-02-04T00:39:00+08.00", "path": "/about/", "text": "\u81ea\u6211\u4ecb\u7ecd\n\u62e5\u6709\u9b45\u9b54\u8eab\u4efd\u7684\u53ef\u7231\u732b\u5a18\uff0c\u73b0\u5728\u4e3a\u5bb6\u5ba4\u52aa\u529b\u3002Mastodon\u7248\u6743\u76f8\u5173\n\u672c\u535a\u5ba2\u5185\u5bb9\u9664\u7279\u522b\u58f0\u660e\u5916\u4e00\u5f8b\u5728 CC-BY-NC 4.0 \u4e0b\u53d1\u5e03\u3002", "categories": [], "tags": []}]}