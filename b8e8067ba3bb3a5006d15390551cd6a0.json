{"posts": [{"title": "\u4ee4\u4eba\u8d5e\u53f9\u7684Rust\u4e0d\u7a33\u5b9a\u7279\u6027", "date": "2021-07-28T15:04:00+08.00", "path": "/archives/awesome-unstable-rust-features/", "text": "\u5173\u4e8e\u7ffb\u8bd1\n\u4e3b\u8981\u8bd1\u8005\uff1apoly000\u6807\u9898\u7ffb\u8bd1\u53c2\u8003\u4e86 @xieyuheng \u7684\u5efa\u8bae\u3002\u672f\u8bed\u90e8\u5206\u7ffb\u8bd1\u53c2\u8003\u4e86 Rust \u8bed\u8a00\u672f\u8bed\u4e2d\u82f1\u6587\u5bf9\u7167\u8868\uff0c\u6709\u6539\u52a8\u3002\u8fd9\u4e2a\u7ffb\u8bd1\u5c1a\u672a\u5b8c\u6210\uff0c\u9884\u8ba1\u9700\u8981\u591a\u65e5\u52aa\u529b\u3002Credits\n\u539f\u6587 by Ethan Brierley\u7b80\u4ecb\n\u8fd9\u7bc7\u6587\u7ae0\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u5c1a\u4e0d\u7a33\u5b9a\u7684 Rust \u7f16\u8bd1\u5668\u7279\u6027\u3002\u5b83\u5c06\u4f1a\u7b80\u8981\u53d9\u8ff0\u8fd9\u4e9b\u7279\u6027\uff0c\u5e76\u4e0d\u4f1a\u6df1\u5165\u592a\u591a\u7684\u7ec6\u8282\u3002\u4ec0\u4e48\u662f\u4e0d\u7a33\u5b9a Rust\uff1f\nRust \u53d1\u5e03\u4e8e\u4e09\u4e2a\u6e20\u9053\uff1a stable\uff0cbeta\uff0c\u4ee5\u53ca nightly\u3002Nightly \u7f16\u8bd1\u5668\u6bcf\u5929\u90fd\u4f1a\u53d1\u5e03\uff0c\u800c\u4e14\u552f\u6709\u5b83\u5141\u8bb8\u4f60\u89e3\u9501\u4e0d\u7a33\u5b9a Rust \u7279\u6027\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u53ea\u8ba8\u8bba\u4e0d\u7a33\u5b9a\u7f16\u8bd1\u5668\u7279\u6027\uff0c\u4e0d\u7a33\u5b9a\u7684\u5e93\u7279\u6027\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u8bdd\u9898\u3002\n\u4e3a\u4ec0\u4e48\u8981\u7528\u4e0d\u7a33\u5b9a\u7279\u6027\uff1f\n\u4e0d\u7a33\u5b9a Rust \u53ef\u4ee5\u8ba9\u4f60\u4f7f\u7528\u5728\u7a33\u5b9a Rust \u4e2d\u65e0\u6cd5\u8868\u793a\u7684API\u3002\u6b63\u56e0\u5982\u6b64\uff0c\u7f16\u8bd1\u5668\u4e0e\u6807\u51c6\u5e93\u90fd\u4f7f\u7528\u4e86\u4e0d\u7a33\u5b9a\u7279\u6027\u3002\u4f7f\u7528\u4e0d\u7a33\u5b9a\u7684\u7279\u6027\u603b\u662f\u4f34\u968f\u7740\u4e00\u4e9b\u98ce\u9669\u3002\u5b83\u4eec\u7ecf\u5e38\u4f1a\u6709\u4e00\u4e9b\u610f\u60f3\u4e0d\u5230\u7684\u884c\u4e3a\uff0c\u6709\u65f6\u751a\u81f3\u4f1a\u7834\u574f Rust \u7684\u5185\u5b58\u5b89\u5168\u4fdd\u8bc1\uff0c\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u3002\u4e00\u90e8\u5206\u7279\u6027\u53ef\u80fd\u5f00\u53d1\u7684\u5f88\u597d\uff0c\u800c\u53e6\u4e00\u90e8\u5206\u53ef\u80fd\u672a\u88ab\u5f00\u53d1\u3002\u5b83\u53d1\u751f\u4e8e\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0c\u7f16\u8bd1\u5668\u5c06\u4f1a\u6050\u614c\u3002\nThis could be due to data and queries becoming malformed by incomplete features or even just hitting a todo! on part of a feature that has not been worked on yet.\n\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u6570\u636e\u4e0e\u67e5\u8be2\u64cd\u4f5c\u56e0\u4e0d\u5b8c\u6574\u7684\u7279\u6027\u800c\u7578\u5f62\uff0c\u751a\u81f3\u53ef\u80fd\u53ea\u662f\u5728\u672a\u505a\u51fa\u7684\u7279\u6027\u90e8\u5206\u6253\u4e86\u4e00\u4e2a todo!()\n\u5982\u679c\u4f60\u9047\u5230\u4e86ICE\uff0c\u68c0\u67e5\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\u662f\u5426\u5df2\u77e5\uff0c\u5426\u5219\u5c31\u628a\u5b83\u62a5\u544a\u7ed9bug tracker\u3002Rust \u4e0d\u4fdd\u8bc1\u5728\u672a\u6765\u7ee7\u7eed\u652f\u6301\u5b83\u7684\u4e0d\u7a33\u5b9a\u7279\u6027\u3002\n\u4f5c\u4e3a Rust \u5f00\u53d1\u8005\uff0c\u6211\u4eec\u4eab\u53d7\u7740\u4f18\u79c0\u7684\u5411\u4e0b\u517c\u5bb9\u6027\u4e0e\u7a33\u5b9a\u6027\uff0c\n\u800c\u542f\u7528\u4e0d\u7a33\u5b9a\u7279\u6027\u65f6\uff0c\u8fd9\u4e9b\u4fdd\u8bc1\u90fd\u88ab\u629b\u5728\u8111\u540e\u3002\n\u4eca\u5929\u5de5\u4f5c\u7684\u7a0b\u5e8f\u53ef\u80fd\u660e\u5929\u5c31\u5927\u4e0d\u76f8\u540c\u3002\u6211\u51b3\u5b9a\u7814\u7a76\u4e0d\u7a33\u5b9a\u7279\u6027\uff0c\u4e0d\u662f\u56e0\u4e3a\u6211\u9700\u8981\u7528\u5b83\u4eec\u53bb\u89e3\u51b3\u5b9e\u9645\u95ee\u9898\u3002\n\u6211\u5bfb\u627e\u5b83\u4eec\u662f\u56e0\u4e3a\u6211\u89c9\u5f97\u4ed6\u4eec\u5f88\u6709\u8da3\u3002\n\u5bf9\u6211\u6765\u8bf4\uff0c\u4f7f\u7528\u4e0d\u7a33\u5b9a\u7684\u7279\u6027\uff0c\u662f\u4e00\u79cd\u6709\u8da3\u7684\uff0c\u4f7f\u6211\u66f4\u591a\u5730\u53c2\u4e0e\u5230\u8bed\u8a00\u672c\u8eab\u7684\u5f00\u53d1\u8fc7\u7a0b\u7684\u65b9\u6cd5\u3002\n\u4e0d\u7a33\u5b9a\u7279\u6027\u7684\u5168\u9762\u5217\u8868\u89c1\u4e0d\u7a33\u5b9a\u7279\u6027\u5217\u8868\u3002\n\u542f\u7528\u4e0d\u7a33\u5b9a\u7279\u6027\n\u4e3a\u4e86\u5f00\u59cb\u4f7f\u7528\u4e0d\u7a33\u5b9a\u7279\u6027\uff0c\u9996\u5148\u4f60\u9700\u8981\u5b89\u88c5 Nightly \u5de5\u5177\u94fe\uff1arustup toolchain install nightly\n\n\u82e5\u8981\u4f7f\u7528 Nightly \u5de5\u5177\u94fe\uff0c\u4f60\u9700\u8981\u5728\u8fd0\u884c\u547d\u4ee4\u65f6\u52a0\u4e0a +nightly \u4fee\u9970\u7b26\u3002&lt;rust-command&gt; +nightly &lt;args&gt;\n\nFor example:cargo +nightly run\n\n\u53e6\u5916\uff0c\u4f60\u53ef\u4ee5\u5c06\u4f60\u7684\u9ed8\u8ba4\u7f16\u8bd1\u5668\u6539\u4e3a Nightly \uff0c\u8fd9\u6837\u4f60\u5c31\u4e0d\u518d\u9700\u8981\u4f7f\u7528 +nightly \u4fee\u9970\u7b26\u3002\n\u6211\u7ecf\u5e38\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u6211\u4e0d\u8ba4\u4e3a nightly \u7f16\u8bd1\u5668\u5f88\u4e0d\u7a33\u5b9a\uff0c\u5373\u4f7f\u5bf9\u4e8e\u6211\u7684\u5728 stable \u4e0a\u53ef\u4ee5\u7f16\u8bd1\u7684\u9879\u76ee\u4e5f\u662f\u8fd9\u6837\u3002rustup default nightly\n\n\u4e00\u65e6\u4f60\u4f7f\u7528 nightly \u7f16\u8bd1\u5668\uff0c\u4f60\u5c31\u53ef\u4ee5\u76f4\u63a5\u5f00\u59cb\u4f7f\u7528\u4e0d\u7a33\u5b9a\u7279\u6027\u3002\u8ba9\u6211\u4eec\u8bd5\u4e00\u8bd5\u5427\uff01fn main() {\n    let my_box = box 5;\n}\n\n\u5b83\u4f1a\u5bfc\u81f4\u8fd9\u6837\u7684\u7f16\u8bd1\u9519\u8bef\uff1aerror[E0658]: box expression syntax is experimental; you can call `Box::new` instead\n --&gt; src/main.rs:2:18\n  |\n2 |     let my_box = box 5;\n  |                  ^^^^^\n  |\n  = note: see issue #49733 &lt;https://github.com/rust-lang/rust/issues/49733&gt; for more information\n  = help: add `#![feature(box_syntax)]` to the crate attributes to enable\n\n\u6b63\u5982\u4ee5\u5f80\uff0cRust \u5728 help \u6d88\u606f\u4e2d\u51c6\u786e\u5730\u544a\u8bc9\u4e86\u6211\u4eec\u9700\u8981\u505a\u4ec0\u4e48\u3002\n\u6211\u4eec\u9700\u8981\u7528 #![feature(box_syntax)] \u542f\u7528\u8fd9\u4e2a\u7279\u6027\u3002#![feature(box_syntax)]\nfn main() {\n    let my_box = box 5;\n}\n\n\u6240\u6709\u4e0d\u7a33\u5b9a\u7279\u6027\u90fd\u9700\u8981\u5728\u53ef\u4ee5\u4f7f\u7528\u524d\u4ee5 #![feature(..)] \u542f\u7528\u3002\n\u5982\u679c\u4f60\u5fd8\u8bb0\u4e86\uff0c\u7f16\u8bd1\u5668\u901a\u5e38\u4f1a\u6b63\u786e\u5730\u6307\u51fa\u8981\u5982\u4f55\u505a\uff0c\u7136\u800c\uff0c\u5e76\u975e\u603b\u4f1a\u8fd9\u6837\u3002\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5f00\u59cb\u8ba8\u8bba\u4e00\u4e9b\u7279\u6027\u672c\u8eab\u3002\n\u6211\u628a\u4f60\u9700\u8981\u542f\u7528\u7684\u7279\u6027\u540d\u79f0\u653e\u5728\u6bcf\u4e2a\u7279\u6027\u7684\u6807\u9898\u4e2d\u7684 \u4ee3\u7801\u5757 \u4e2d\uff0c\u800c\u5728\u4ee3\u7801\u7247\u6bb5\u4e2d\u7701\u7565\u5b83\u4eec\uff0c\u4ee5\u4fdd\u6301\u7b80\u6d01\u3002\u63a7\u5236\u6d41\u3001\u6a21\u5f0f\u548c\u5757\ndestructuring_assignment\n\u5728Rust\u4e2d\uff0c\u5728\u7ed1\u5b9a\u67d0\u4e00\u7c7b\u578b\u5230\u4e00\u4e2a\u5b9a\u4e49\u65f6\u89e3\u6784\u5b83\u662f\u5f88\u5e38\u89c1\u7684\u3002\n\u8fd9\u901a\u5e38\u662f\u901a\u8fc7 let \u7ed1\u5b9a\u5b8c\u6210\u7684\u3002// \u521b\u5efa\u4e24\u4e2a &quot;\u53d8\u91cf&quot;, \u4e00\u4e2a\u662f x, \u4e00\u4e2a\u662f y \nlet Point { x, y } = Point::random();\n\n\u4f20\u7edf\u4e0a\uff0c\u8fd9\u79cd\u6a21\u5f0f\u53ea\u6709\u5728\u5b9e\u4f8b\u5316\u4e00\u4e2a\u65b0\u5b9a\u4e49\u65f6\u624d\u80fd\u5b9e\u73b0\u3002\ndestructuring_assignment \u5c06\u5b83\u62d3\u5c55\u5230\u53ef\u7528\u4e8e\u4fee\u6539\u503c\u65f6\u3002\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u4f7f\u7528 let \u5b8c\u6210\u89e3\u6784\u3002let (mut x, mut y) = (0, 0);\n\nPoint { x, y } = Point::random();\n\n\u4ece\u4efb\u610f\u5757\u63d0\u524d\u8fd4\u56de\uff0clabel_break_value\nOne of the less well-known Rust features is the fact that loop\u53ef\u4ee5\u5e26\u503c\u9000\u51fa.\nLike many of the constructs in Rust loops are not just statements, but expressions.// Keep asking the user to input an number until they give us a valid one\nlet number: u8 = loop {\n    if let Ok(n) = input().parse() {\n        break n;\n    } else {\n        println!(&quot;Invaid number, Please input a valid number&quot;);\n    }\n};\n\nlabel_break_value extends this to work on any labelled block, not just loops.\nThis acts as a kind of early return that works on any block of code, not just function bodies.To label a block you use a syntax similar to lifetimes.&#39;block: {\n     // This block is now labelled &quot;block&quot;\n}\n\nIt is already possible to label loops much in the same way.We can put the same label on our break to early return from that block.let number = &#39;block: {\n    if s.is_empty() {\n      break &#39;block 0; // Early return from block\n    }\n    s.parse().unwrap()\n}\n\n\nThis feature is not equivalent to goto.\nIt does not have the same damaging effects as goto as it only goes forward and breaks from a block.\nInlining the power of the ? operator using try_blocks\nThe edition guide uses this example to illustrate how the question mark operator works:fn read_username_from_file() -&gt; Result&lt;String, io::Error&gt; {\n    let f = File::open(&quot;username.txt&quot;);\n\n    let mut f = match f {\n        Ok(file) =&gt; file,\n        Err(e) =&gt; return Err(e),\n    };\n\n    let mut s = String::new();\n\n    match f.read_to_string(&amp;mut s) {\n        Ok(_) =&gt; Ok(s),\n        Err(e) =&gt; Err(e),\n    }\n}\n\nSimplifying using the ? operator, results in this equivalent code:fn read_username_from_file() -&gt; Result&lt;String, io::Error&gt; {\n    let mut f = File::open(&quot;username.txt&quot;)?;\n    let mut s = String::new();\n\n    f.read_to_string(&amp;mut s)?;\n\n    Ok(s)\n}\n\n? is used in the context of functions to early return an Err if encountered.\ntry_blocks unlock the same power but for any block of code rather than just functions.\nWith try_blocks we can inline our read_usernames_from_file function.try_blocks relate to ? in the same way that label_break_value relates to return.\nThe RFC for try_blocks mentions label_break_value as a potential way of desugaring  try_blocks.Let's rewrite our read_username_from_file function as a simple let binding with a try block.let read_username_from_file: Result&lt;String, io::Error&gt; = try {\n    let mut f = File::open(&quot;username.txt&quot;)?;\n    let mut s = String::new();\n\n    f.read_to_string(&amp;mut s)?;\n\n    Ok(s)\n}\n\nI love this kind of thing especially for smaller expressions that can be made easier to read when not extracted into functions.inline_const\nCurrently, the way to get a value to be evaluated at compile time is by defining a constant.const PI_APPROX: f64 = 22.0 / 7.0;\n\nfn main() {\n     let value = func(PI_APPROX);\n}\n\nWith inline_const we can do the same as an anonymous expression.fn main() {\n     let value = func(const { 22.0 / 7.0 });\n}\n\nWith this simple example, the const block is almost certainly not necessary, due to compiler optimisations such as constant propagation,\nhowever, with more complex constants, it may be helpful to be explicit with the block.This feature also allows for these blocks to be used in pattern position.\nmatch x { 1 + 3 =&gt; {} } results in a syntax error while match x { const { 1 + 3 } =&gt; {} }does not.if_let_guard\nExtends the if guards that you can use with match statements to be able to use if let.let_chains\nCurrently, if let and while let expressions can not be chained with || or &amp;&amp;.\nThis feature adds that support.Traits\nassociated_type_bounds\nLet's take this stable Rust function:fn fizzbuzz() -&gt; impl Iterator&lt;Item = String&gt; {\n    (1..).map(|val| match (val % 3, val % 5) {\n        (0, 0) =&gt; &quot;FizzBuzz&quot;.to_string(),\n        (0, _) =&gt; &quot;Fizz&quot;.to_string(),\n        (_, 0) =&gt; &quot;Buzz&quot;.to_string(),\n        (_, _) =&gt; val.to_string(),\n    })\n}\n\nWith the associated_type_bounds feature we can use an anonymous type in this context:fn fizzbuzz() -&gt; impl Iterator&lt;Item: Display&gt; { ... }\n\nLet's take a look at this horribly repetitive type signature:fn flatten_twice&lt;T&gt;(iter: T) -&gt; Flatten&lt;Flatten&lt;T&gt;&gt;\nwhere\n    T: Iterator,\n    &lt;T as Iterator&gt;::Item: IntoIterator,\n    &lt;&lt;T as Iterator&gt;::Item as IntoIterator&gt;::Item: IntoIterator,\n{\n    iter.flatten().flatten()\n}\n\nWith this feature, we can write it simply as:fn flatten_twice&lt;T&gt;(iter: T) -&gt; Flatten&lt;Flatten&lt;T&gt;&gt;\nwhere\n    T: Iterator&lt;Item: IntoIterator&lt;Item: IntoIterator&gt;&gt;,\n{\n    iter.flatten().flatten()\n}\n\nWhich is far easier for me to reason about.default_type_parameter_fallback, associated_type_defaults and const_generics_defaults\nThese features allow you to specify default values for generic types, associated types and const variables respectively in more places.This allows you as a developer to create nicer APIs.\nIf a crate user is not interested in a detail and that item has a default then the detail can be omitted.\nThis also makes it easier to extend APIs without making breaking changes for your users.negative_impls and auto_traits\nBoth of these features are used in the standard library. The traits Send and Sync are both examples of auto traits.The trait Send is defined in the standard library as so:pub unsafe auto trait Send {\n    // empty.\n}\n\nNote the use of the auto keyword.\nThis tells the compiler to automatically implement the Send trait for any struct/enum/union as long as all the types that make up said type also implement Send.Auto traits would not be very useful if simply every type always implemented them.\nThat is where negative_impls come in.negative_impls allows for a type to opt-out from implementing an auto trait.\nTake for example UnsafeCell. It would be very unsafe for an unrestricted UnsafeCell to be shared across threads, therefore it would be very unsafe for it to be Sync.impl&lt;T: ?Sized&gt; !Sync for UnsafeCell&lt;T&gt; {}\n\nNote the creative use of ! to express &quot;not Sync&quot;.marker_trait_attr\nThis feature adds the #[marker] attribute for traits.Rust disallows the defining of traits implementations that could overlap.\nThis is so that the compiler will always know which implementation to use because there will always be only one.Traits marked with #[marker] cannot override anything in their implementations.\nThat way they are allowed to have overlapping implementations because all implementations will be the same.type_alias_impl_trait, impl_trait_in_bindings and trait_alias\nimpl Trait tells the compiler to infer a concrete type to replace it with that implements Trait.\nCurrently, impl Trait is only used in the context of function arguments or return types.type_alias_impl_trait and impl_trait_in_bindings extend the places impl trait can be used to include type aliases and let bindings respectively.trait_alias is subtlely different to type_alias_impl_trait.\nEverywhere you use a type alias the type must remain constant.\nA single concrete type must be inferred by the compiler that works in all those places.\nTrait aliases are more forgiving as they can be a different type in each place they are used.fn_traits and unboxed_closures\nThe three traits Fn, FnMut and FnOnce are known as the fn traits.\nThey are automatically implemented for any functions or closures that you create and are what provides the ability to pass arguments to them.An automatic implementation is currently the only way to implement those traits.\nThe fn_traits feature allows for custom implementations on any type.\nThis is very similar to operator overloading but customising the use of ().#![feature(unboxed_closures)] // required to implement a function with `extern &quot;rust-call&quot;`\n#![feature(fn_traits)]\n\nstruct Multiply;\n\n#[allow(non_upper_case_globals)]\nconst multiply: Multiply = Multiply;\n\nimpl FnOnce&lt;(u32, u32)&gt; for Multiply {\n    type Output = u32;\n    extern &quot;rust-call&quot; fn call_once(self, a: (u32, u32)) -&gt; Self::Output {\n        a.0 * a.1\n    }\n}\n\nimpl FnOnce&lt;(u32, u32, u32)&gt; for Multiply {\n    type Output = u32;\n    extern &quot;rust-call&quot; fn call_once(self, a: (u32, u32, u32)) -&gt; Self::Output {\n        a.0 * a.1 * a.2\n    }\n}\n\nimpl FnOnce&lt;(&amp;str, usize)&gt; for Multiply {\n    type Output = String;\n    extern &quot;rust-call&quot; fn call_once(self, a: (&amp;str, usize)) -&gt; Self::Output {\n        a.0.repeat(a.1)\n    }\n}\n\nfn main() {\n    assert_eq!(multiply(2, 3), 6);\n    assert_eq!(multiply(2, 3, 4), 24);\n    assert_eq!(multiply(&quot;hello &quot;, 3), &quot;hello hello hello &quot;);\n}\n\nNotice that this is being used to create a hacky version of function overloading and variadic functions.Sugar\nbox_patterns and box_syntax\nThese two features make constructing and destructing Boxes easier.\nThe box keyword replaces Box::new(..) and allows for the dereferencing Boxes when pattern matching.struct TrashStack&lt;T&gt; {\n    head: T,\n    body: Option&lt;Box&lt;TrashStack&lt;T&gt;&gt;&gt;,\n}\n\nimpl&lt;T&gt; TrashStack&lt;T&gt; {\n    pub fn push(self, elem: T) -&gt; Self {\n        Self {\n            head: elem,\n            body: Some(box self),\n        }\n    }\n\n    pub fn peek(self) -&gt; Option&lt;T&gt; {\n        if let TrashStack {\n            body: Some(box TrashStack { head, .. }),\n            ..\n        } = self\n        {\n            Some(head)\n        } else {\n            None\n        }\n    }\n}\n\nThis makes things a little more ergonomic but I don't think there is much chance that this feature will ever be stabilised.\nIt seems to have existed forever with no plan for stabilisation but instead a little discussion about removing the feature.\nbox_synatx is used heavily in the compiler's source and a little in the standard library.It is interesting to note that box does not desugar to Box::new but Box::new is implemented in the standard library with box.impl&lt;T&gt; Box&lt;T&gt; {\n    ...\n    pub fn new(x: T) -&gt; Self {\n        box x\n    }\n    ...\n}\n\nasync_closure\nCurrently to be async inside of a closure you have to use an async block.app.at(&quot;/&quot;).get(|_| async { Ok(&quot;Hi&quot;) });\n\nasync_closure allows you to mark the closure itself as async just like you would a async function.app.at(&quot;/&quot;).get(async |_| Ok(&quot;Hi&quot;));\n\nin_band_lifetimes\nTo use a lifetime it must be explicitly brought into scope.fn select&lt;&#39;data&gt;(data: &amp;&#39;data Data, params: &amp;Params) -&gt; &amp;&#39;data Item;\n\nWith in_band_lifetimes the lifetimes can be used without bringing them into scope first.fn select(data: &amp;&#39;data Data, params: &amp;Params) -&gt; &amp;&#39;data Item;\n\nInterestingly enough this was how lifetimes used to work pre 1.0.0.format_args_capture\nThis allows for named arguments to be placed inside of strings inside any macro that depends on std::format_args!.\nThat includes print!, format!, write! and many more.let name = &quot;Ferris&quot;;\nlet age = 11;\nprintln!(&quot;Hello {name}, you are {age} years old&quot;);\n\nIt is likely that this will be stabilised with or soon after edition 2021.crate_visibility_modifier\nWith this feature you can write crate struct Foo rather than pub(crate) struct Foo and have it mean exactly the same thing.This makes pub(crate) easier to write, encouraging the use of crate visibility when full pub is not necessary.Types\ntype_ascription\nTake for example the collect method on Iterator.\nCollect transforms an interator into a collection.let word = &quot;hello&quot;.chars().collect();\nprintln!(&quot;{:?}&quot;, word);\n\nThis does not compile because Rust is unable to infer the type of word.\nThis can be fixed by replacing the first line with:let word: Vec&lt;char&gt; = &quot;hello&quot;.chars().collect();\n\nWith type_ascription the let binding is no longer necessary and one can simply:println!(&quot;{:?}&quot;, &quot;hello&quot;.chars().collect(): Vec&lt;char&gt;);\n\nThe : Type syntax can be used anywhere to hint at the compiler &quot;I want this type at this point&quot;.never_type\nIt is possible to define enums with zero variants.\nSuch an enum exists stable in the standard library.pub enum Infallible {}\n\nIt is possible to use this type in generics and function signatures but never possible for it to be constructed.\nThere are simply no variants to construct.The unit type, () would be equivalent to an enum with a single variant.\nnever_type introduces a new type, ! which is equivalent to our Infallible enum with zero variants.Because ! can never be constructed it can be given special powers.\nWe don't have to handle the case of ! because we have proven it will never exist.fn main() -&gt; ! {\n    loop {\n        println!(&quot;Hello, world!&quot;);\n    }\n}\n\nLoops without a break &quot;return !&quot; because they don't ever return.! can be very useful for expressing impossible outcomes in the type system.\nTake for example the FromStr implementation on this UserName type.\nThis implementation is infallible because its implementation can never fail.\nThis allows us to set the Err variant to type !.struct UserName(String);\n\nimpl FromStr for UserName {\n    type Err = !;\n    fn from_str(s: &amp;str) -&gt; Result&lt;Self, Self::Err&gt; {\n        Ok(Self(s.to_owned()))\n    }\n}\n\nIt is then possible to use an empty match on the Err variant because ! has no variants.let user_name = match UserName::from_str(&quot;ethan&quot;) {\n    Ok(u) =&gt; u,\n    Err(e) =&gt; match e {},\n};\n\nWith the feature exhaustive_patterns the type system becomes smart enough for us to eliminate the Err branch altogether.let user_name = match UserName::from_str(&quot;ethan&quot;) {\n    Ok(u) =&gt; u,\n};\n\nWe can combine this with destructuring to remove the match leaving a beautiful line of code.let Ok(user_name) = UserName::from_str(&quot;ethan&quot;);\n\nAttributes\noptimize_attribute\nIt is possible to specify how you want your binary to be optimised with Cargo.toml using opt-level.The opt-level affects the entire crate while the optimize_attribute can control optimization for individual items.#[optimize(speed)]\nfn fast_but_large() {\n     ...\n}\n#[optimize(size)]\nfn slow_but_small() {\n     ...\n}\n\nThis would be very useful for fine-tuning applications where the trade off between size and performance is particularly pronounced such as when using web assembly.stmt_expr_attributes\nThis feature allows you to place attributes almost everywhere not just top-level items. For example with this feature, you are able to place an optimize attribute on a closure.cfg_version\nThis feature allows for conditional compilation based on compiler version.#[cfg(version(&quot;1.42&quot;))] // 1.42 and above\nfn a() {\n    // ...\n}\n\n#[cfg(not(version(&quot;1.42&quot;)))] // 1.41 and below\nfn a() {\n    // ...\n}\n\nThis allows crates to make use of the latest compiler features while still keeping fallback support for old compilers.no_core\nIt has been possible to opt-out of using the standard library using #![no_std] for a while.\nThis is important for applications that don't run in a full environment such as embedded systems.\nEmbedded systems often don't have an operating system or even dynamic memory so many of the functions in std wouldn't work.#![no_core] takes it further by opting out of libcore.\nThat leaves you with almost nothing, you can't even use libc.\nThis makes it very difficult to implement anything useful.Other\nConst Generics\nI spoke about the future of const_generics at my talk for Rust Dublin.\nRather than me reiterating what I said there, I encourage you to watch that talk.Macros 2.0\nRust's declarative macros are very powerful however some of the rules around macro_rules! have always confused me.For one, macro_rules! acts as a simple token transformation.\nIt takes a list of tokens and outputs a new list of tokens, nothing smarter than that.\nThe publicity rules end up being the rules of where the macro is being called.\nThis is obvious because the codes is being simply pasted into that place.Macros 2.0 is an rfc describing a replacement to macro_rules! with a new construct simply using the keyword macro.One of the main improvements the new syntax introduces is macro hygiene which allows macros to use the publicity rules of where they are written rather than where they are called.generators\nGenerators/coroutines provide a special kind of function that can be paused during execution to &quot;yield&quot; intermediate values to the caller.Generators can return multiple values using the yield keyword, each time pausing the function and returning to the caller.\nA generator can then return a single value after which it can no longer be resumed.About three years ago I attempted to write an algorithm to traverse an infinite matrix along its diagonals.\nI found it very difficult to write that with Rust's iterators and ended up giving up.Here is an implementation using Rust's generators/coroutines along with a number of other features we've discussed already.#![feature(\n    try_blocks,\n    generators,\n    generator_trait,\n    associated_type_bounds,\n    type_ascription\n)]\n\nuse std::{\n    iter,\n    ops::{Generator, GeneratorState},\n    pin::Pin,\n};\n\n/// Input\n/// [[1, 2, 3]\n/// ,[4, 5, 6]\n/// ,[7, 8, 9]]\n/// Output\n/// [1, 2, 4, 3, 5, 7]\nfn diagonalize&lt;T&gt;(\n    mut matrix: impl Iterator&lt;Item: Iterator&lt;Item = T&gt;&gt;,\n) -&gt; impl Generator&lt;Yield = T, Return = ()&gt; {\n    move || {\n        let mut rows = Vec::new();\n        (try {\n            rows.push(matrix.next()?);\n            for height in 0.. {\n                for row in 0..height {\n                    if row &gt;= rows.len() {\n                        rows.push(matrix.next()?);\n                    }\n                    yield rows[row].next()?;\n                }\n            }\n        }): Option&lt;()&gt;;\n    }\n}\n\nfn main() {\n    let matrix = (0..).map(|x| iter::once(x).cycle().enumerate());\n    let mut diagonals = diagonalize(matrix);\n    while let GeneratorState::Yielded(value) = Pin::new(&amp;mut diagonals).resume(()) {\n        dbg!(value);\n    }\n}\n\n\nIt is understandable if you found the above snippet hard to interpret.\nIt makes use of a number of features that you may have just been introduced to.There is a compelling argument against adding too many new features as they can greatly increase the learning curve.\nGenerators make it possible to write implementations that are far more difficult or even impossible to write without them.Generators were added to implement async-await in the standard library.\nIt is most likely that the exact semantics will change before any kind of stabilisation but they are very fun to play with.Final thoughts\nI have to apologise for not including three amazing unstable features; Generic associated types, inline asm and specialization.\nI simply did not feel able to give these features justice in this article but I may try to talk about them in future.If you wish to read more about an unstable feature the best place to start is the unstable book where most of them are listed.\nThe unstable book then links to a tracking issue which then often, in turn, links to an RFC.\nWith this combination of sources, you can then build up a picture of the details surrounding a feature.Thank you for reading my first blog post \ud83d\ude03.\nThe best way to support me is by following my Twitter.\nI am also looking for employment opportunities so please get in touch if you would like to talk about that.", "categories": [{"name": "Programming", "slug": "Programming", "permalink": "/category/Programming/"}], "tags": [{"name": "Rust", "slug": "Rust", "permalink": "/tag/Rust/"}, {"name": "Language_feature", "slug": "Language_feature", "permalink": "/tag/Language_feature/"}]}, {"title": "\u5173\u4e8e Osdlyrics \u7f51\u6613\u6765\u6e90\u542f\u7528\u7ffb\u8bd1", "date": "2021-07-25T17:45:00+08.00", "path": "/archives/enable-osdlyrics-netease-translation/", "text": "\u5f15\u8a00\n\u4eca\u5929\u5076\u7136\u5f97\u77e5 GNU/Linux \u4e0b\u7684 Osdlyrics \u53ef\u7528\u4e8e\u684c\u9762\u6b4c\u8bcd\u4f46\u662f\u5b83\u6682\u4e0d\u652f\u6301\u4f7f\u7528\u7ffb\u8bd1\u3002\u6240\u4ee5\u8fd9\u6b21\u8bf4\u4e00\u4e0b\u600e\u4e48\u4fee\u6539 Osdlyrics \u7684\u7f51\u6613\u6765\u6e90\u811a\u672c\u5c1d\u8bd5\u4f7f\u7528\u7ffb\u8bd1\u6b4c\u8bcd\u3002\u539f\u7406\n\u6839\u636e NeteaseCloudMusicApi \uff0c\n\u6211\u53d1\u73b0\u7f51\u6613\u7684\u7ffb\u8bd1LRC\u548c\u539fLRC\u662f\u533a\u5206\u7684\u3002\u56e0\u6b64\uff0c\u53ea\u8981\u4fee\u6539 /usr/lib/osdlyrics/lyricsources/netease/ \u4e0b\u7684 netease.py\uff1a@@ -86,7 +86,9 @@ class NeteaseSource(BaseLyricSourcePlugin):\n         # Avoid processing results with no lyrics.\n         if &#39;nolyric&#39; in parsed or &#39;uncollected&#39; in parsed:\n             raise ValueError(&#39;This item has no lyrics.&#39;)\n-        lyric = parsed[&#39;lrc&#39;][&#39;lyric&#39;]\n+        lyric = parsed[&#39;tlyric&#39;][&#39;lyric&#39;]\n+        if not lyric:\n+            lyric = parsed[&#39;lrc&#39;][&#39;lyric&#39;] # If there is no translation, use the original lyric instead\n         return lyric.encode(&#39;utf-8&#39;)\n\n\u8fd9\u6837\u4fee\u6539\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u7ffb\u8bd1\u6b4c\u8bcd\u3002", "categories": [{"name": "Linux", "slug": "Linux", "permalink": "/category/Linux/"}], "tags": [{"name": "Linux", "slug": "Linux", "permalink": "/tag/Linux/"}, {"name": "Lyrics", "slug": "Lyrics", "permalink": "/tag/Lyrics/"}]}, {"title": "OpenGL Flipping\u2014\u2014\u8bb0\u4e00\u6b21\u6e38\u620f\u76f4\u64ad\u95ea\u5c4f\u4fee\u590d\u8fc7\u7a0b", "date": "2021-07-20T01:03:00+08.00", "path": "/archives/opengl-flipping/", "text": "\u5f15\u8a00\n\u6b64\u524d\u6211\u5728 bilibili \u4e0a\u4f20 osu! \u7b49\u6e38\u620f\u89c6\u9891 \u53d1\u73b0\u6709\u95ea\u5c4f\u73b0\u8c61\u3002\u5f88\u4e45\u4ee5\u540e\u6211\u5230 OBS \u793e\u533a \u5bfb\u6c42\u5e2e\u52a9\uff0c\u7ec8\u4e8e\u5f97\u5230\u4e86\u89e3\u51b3\u65b9\u6848\u3002Flipping\nNVIDIA Flipping \u662f\u79cd\u53ef\u4ee5 \u7565\u5fae \u63d0\u9ad8\u5e27\u7387\u7684\u6280\u672f\uff0c\u5bf9\u4e8e\u5185\u5bb9\u521b\u4f5c\u8005\uff08\u5f55\u5236\u89c6\u9891\uff0c\u5168\u5c4f\u6a21\u5f0f\u7684\u8bdd\uff09\u5e94\u5f53\u7981\u7528\uff0c\u4e0d\u7136\u4f1a\u5f71\u54cd\u5f55\u5236\uff08\u8be6\u89c1\u5b98\u65b9\u6587\u6863\uff09\u7981\u7528\u4e4b\u540e\uff0c\u5782\u76f4\u540c\u6b65\u4f1a\u65e0\u6cd5\u4f7f\u7528\uff0c\u800c\u4e14\u4f1a\u6709 \u7565\u5fae \u6027\u80fd\u4e0b\u964d", "categories": [{"name": "Linux", "slug": "Linux", "permalink": "/category/Linux/"}], "tags": [{"name": "Linux", "slug": "Linux", "permalink": "/tag/Linux/"}, {"name": "Recording", "slug": "Recording", "permalink": "/tag/Recording/"}]}, {"title": "WinDirStat\u2014\u2014Windows\u4e0b\u5b58\u50a8\u5206\u6790\u7684\u4f18\u79c0\u65b9\u6848", "date": "2021-06-23T19:30:00+08.00", "path": "/archives/windirstat-recommend/", "text": "\u5f15\u8a00\n\u4e00\u4e2a\u6708\u524d\u6e05\u7406C\u76d8\uff0c\u7136\u540e\u5728 alternativeto.net \u627e\u5230\u4e86 FileLight \u5728 Windows \u4e0a\u7684\u66ff\u4ee3\u54c1\uff0c\u6700\u540e\u9009\u62e9\u4e86 WinDirStat \u3002\u76f8\u8f83\u4e8e TreeSize \u62bd\u8c61\u7684\u997c\u56fe\u548c\u76ee\u5bb3\u7684\u5927\u5c0f\u56fe\uff0cWinDirStat \u4f7f\u7528 \u989c\u8272 \uff08\u5bf9\u5e94\u6587\u4ef6\u7c7b\u578b\uff09\uff0c \u77e9\u5f62\u5927\u5c0f \uff08\u5bf9\u5e94\u6587\u4ef6\u5927\u5c0f\uff09\uff0c\u76f4\u89c2\u5730\u663e\u793a\u4e86\u7a7a\u95f4\u4f7f\u7528\u5206\u5e03\u3002\u9644\u4e00\u5f20\u622a\u56fe\uff1ascreencut", "categories": [{"name": "Windows", "slug": "Windows", "permalink": "/category/Windows/"}], "tags": [{"name": "Windows", "slug": "Windows", "permalink": "/tag/Windows/"}, {"name": "Storage_Analyse", "slug": "Storage_Analyse", "permalink": "/tag/Storage_Analyse/"}]}, {"title": "\u5728wine\u4e0b\u8fd0\u884cgalgame\u5e38\u89c1\u95ee\u9898\u89e3\u51b3\u65b9\u6848", "date": "2021-02-04T00:04:00+08.00", "path": "/archives/galgame-runs-on-linux/", "text": "\u8bf4\u660e\n\u54b1\u7684wine\u4e00\u76f4\u8ddf\u968farchlinux\u5b98\u65b9\u4ed3\u5e93\u6700\u65b0\u7248\u8fd9\u91cc\u5185\u5bb9\u53ef\u80fd\u5f88\u5c11\uff0c\u56e0\u4e3a\u54b1\u6bcf\u6b21wine\u63a8gal\u51fa\u9519\u5e76\u4e14\u89e3\u51b3\u4e86\u624d\u4f1a\u653e\u5230\u8fd9\u91cc\u8fd9\u91cc\u662f\u6b63\u6587\n\u54b1\u5728linux\u4e0b\u63a8gal\u6709\u65f6OP\u4ec0\u4e48\u7684\u7ecf\u5e38\u51fa\u9519\u2026\u2026\u4e8e\u662f\u51c6\u5907\u6574\u7406\u8fd9\u4e2a\u535a\u6587\uff0c\u200b\u6536\u5f55\u5404\u79cd\u9519\u8bef\u4fe1\u606f\u89e3\u51b3\u65b9\u6848\u3002\u901a\u7528\n\nMPEG splitter faild: \u5b89\u88c5 devenum, quartz \u540e\u89e3\u51b3\uff1bquartz\u51fa\u95ee\u9898\u7684\u8bdd\u53ef\u4ee5\u6267\u884c winetricks --force quartz \u91cd\u88c5\u3002\n\u4e07\u80fd\u65b9\u6cd5\uff1a \u5728\u5d29\u6e83\u7684\u5730\u65b9\u5b58\u6863\uff0c\u6362win7\u865a\u62df\u673a\u8d70\u8fc7\u90a3\u6bb5\u5185\u5bb9\u540e\u5b58\u6863\u3002\n\u5176\u4ed6OP\u64ad\u653e\u5d29\u6e83\uff1afaudio\uff08\u95ea\u753b\u9762\u65e0\u58f0\u97f3\uff09\uff0c\u7b49\u7b49\u2026\u2026\uff08\u5f85\u6dfb\u52a0\uff09\n\u6253\u4e0d\u5f00\u6e38\u620f: \u4e00\u822c\u5b89\u88c5DirectX\u76f8\u5173\u4f9d\u8d56\u9879\u5373\u53ef\u89e3\u51b3\n\u542f\u52a8\u65f6\u5f39\u4e86\u4e71\u7801\u62a5\u9519\uff0c\u6216\u8005\u662f\u6e38\u620f\u4e2d\u4e71\u7801\uff08\u6bd4\u5982 Clover Day\u2019s\u4e2d\u6587\u6c49\u5316\u7248\uff0crewrite\uff09\uff0c\u53ef\u4ee5\u5728wine\u524d\u52a0\u542f\u52a8\u53c2\u6570LANG=en_US.UTF-8\uff0c\u6216LANG=zh_CN.UTF-8\u6216LANG=ja_JP.UTF-8\u3002\nWineHQ-AppDB \u901a\u5e38\u4f1a\u6709\u4e00\u4e9b\u4eba\u63d0\u4f9b\u4fe1\u606f\u3002\n\n\u7279\u5b9a\u6e38\u620f\n\u62d4\u4f5c\u5c9b\n\u62d4\u4f5c\u5c9b\u4f7f\u7528\u7f16\u7801 GB18030\u542f\u52a8\u65f6\u4f7f\u7528 LANG=zh_CN.GB18030 wine ... \u5373\u53ef\u89e3\u51b3\u4e71\u7801\u53c2\u8003\u94fe\u63a5\uff08\u9700\u8981\u4e8b\u5148\u8fdb\u884clocale-gen\uff09", "categories": [{"name": "Galgame", "slug": "Galgame", "permalink": "/category/Galgame/"}], "tags": [{"name": "Galgame", "slug": "Galgame", "permalink": "/tag/Galgame/"}, {"name": "Wine", "slug": "Wine", "permalink": "/tag/Wine/"}, {"name": "Linux", "slug": "Linux", "permalink": "/tag/Linux/"}]}, {"title": "GPU\u76f4\u901a\u6559\u7a0b\u6c49\u5316", "date": "2021-02-04T00:04:00+08.00", "path": "/archives/vm-on-linux-use-gpu-passthough/", "text": "\u539f\u6587\u94fe\u63a5\nhttps://clayfreeman.github.io/gpu-passthrough/\u6c49\u5316\n\u6b63\u5728\u505a\u4e86\uff08\u5495\uff09", "categories": [{"name": "Galgame", "slug": "Galgame", "permalink": "/category/Galgame/"}], "tags": [{"name": "Galgame", "slug": "Galgame", "permalink": "/tag/Galgame/"}, {"name": "Linux", "slug": "Linux", "permalink": "/tag/Linux/"}]}, {"title": "Wallpaper Engine\u7684\u5f00\u6e90\u66ff\u4ee3\u54c1\uff1aScreenPlay", "date": "2020-10-01T01:04:00+08.00", "path": "/archives/ScreenPlay/", "text": "\u524d\u8a00\n\u6700\u8fd1\u7a81\u7136\u60f3\u627e\u5f00\u6e90\u7684linux\u4e0a\u7684WE\u66ff\u4ee3\u54c1\uff0c\u7136\u800c\u627e\u5230\u4e86 Windows10 \u4e0b\u8fd0\u884c\u7684\u7684 ScreenPlay \u3002\u611f\u89c9\u633a\u597d\u7684\uff0c\u4e8e\u662f\u8d21\u732e\u4e86zh-CN\u7684\u7ffb\u8bd1\u3002\u5b89\u88c5\n\u9996\u5148\u9700\u8981\u52a0\u5165 Discord\u7fa4\u7ec4 \u83b7\u53d6\u9080\u8bf7\u7801\uff08\u81f3\u5c11\u76ee\u524d\u662f\uff09\u3002\u7136\u540e\u5230Steam\u6fc0\u6d3b\u4ea7\u54c1 -&gt; \u8f93\u5165\u5e8f\u5217\u53f7\u3002\uff08\u5176\u4e2d\u7684bot\u56e0\u4e3a Power$hell \u6613\u6b7b\u3002\uff09\u754c\u9762\u9884\u89c8\u56fe\uff1acreateworkshopsettings", "categories": [{"name": "Windows", "slug": "Windows", "permalink": "/category/Windows/"}], "tags": [{"name": "Windows", "slug": "Windows", "permalink": "/tag/Windows/"}, {"name": "Wallpaper", "slug": "Wallpaper", "permalink": "/tag/Wallpaper/"}]}, {"title": "\u7ed9Win32\u7a0b\u5e8f\u52a0\u56fe\u6807", "date": "2020-09-29T22:08:00+08.00", "path": "/archives/add-icon-to-win32-exe/", "text": "\u524d\u8a00\n\u4e3a\u4e86\u597d\u73a9\u54b1\u60f3\u8981\u8bd5\u7740\u7ed9win32\u7a0b\u5e8f\u52a0\u56fe\u6807\uff0c\u4f46\u662f\u53ea\u627e\u5230\u4e86\u7528VS\u52a0\u56fe\u6807\u7684\u64cd\u4f5c\u2026\u2026\u6700\u540e\u627e\u5230\u4e86\u94fe\u63a5\u64cd\u4f5c\u3002\u539f\u6587\u5730\u5740\uff08\u82f1\u6587\uff09\u5f00\u59cb\u52a8\u624b\u505a\n\u9996\u5148 \u6211\u4eec\u9700\u8981\u5199\u4e00\u4e2a .rc \u7684\u6587\u4ef6\uff1a\n1 ICON &quot;(path-to-*.ico)&quot;\n\n\u7136\u540e\uff0c\u8fd0\u884cwindres [file.rc] [file.o]\n\n\u6700\u540e\u628a .o \u94fe\u63a5\u8fdb\u53bb\uff01(\u8fd9\u91cc\u662fC\u7a0b\u5e8f)\ngcc main.c [file.o]\n\n\u5927\u529f\u544a\u6210\uff01", "categories": [{"name": "Windows", "slug": "Windows", "permalink": "/category/Windows/"}], "tags": [{"name": "Coding", "slug": "Coding", "permalink": "/tag/Coding/"}, {"name": "Development", "slug": "Development", "permalink": "/tag/Development/"}, {"name": "Windows", "slug": "Windows", "permalink": "/tag/Windows/"}]}], "pages": [{"title": "\u5173\u4e8e", "date": "2021-02-04T00:39:00+08.00", "path": "/about/", "text": "\u6b63\u6587\n\u6b22\u8fce\u6765\u5230Poly000\u5ba2\u6808\u672c\u4eba\u80fd\u529b\u6709\u9650\uff0c\u8bf7\u60a8\u4e0d\u8981\u592a\u671f\u671b\u535a\u5ba2\u8d28\u91cf\u4f46\u662f\u672c\u4eba\u4fdd\u8bc1\u4e0d\u4f1a\u4e0a\u4f20\u5783\u573e\u8bdd\u7b49", "categories": [], "tags": []}]}